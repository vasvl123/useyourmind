using System;
using onesharp;

using onesharp.Binary;

namespace webserver
{
    class webserver : useyourmind
    {

        public webserver() : base("webserver") { }

        int Порт;
        bool ОстановитьСервер;
        Соответствие СтатусыHTTP;
        Соответствие СоответствиеРасширенийТипамMIME;
        Соответствие Задачи;
        Массив мЗадачи;
        //Перем Ресурсы;
        Соответствие Контроллеры;
        string Загрузка = " ";
        Структура Параметры;
        Массив Сообщения;
        Массив Соединения;
        Массив СоединенияО;
        bool keep_alive = false;

        string ext; // внешний контроллер


        string УдаленныйУзелАдрес(string УдаленныйУзел)
        {
            return Лев(УдаленныйУзел, Найти(УдаленныйУзел, ":") - 1);
        }


        // Разбирает вошедший запрос и возвращает структуру запроса
        Запрос РазобратьЗапросКлиента(string ТекстЗапроса, TCPСоединение Соединение)
        {
            string ИмяКонтроллера = "";
            string ИмяМетода = "";
            //Перем ПараметрыМетода;
            var Заголовок = Соответствие.Новый();
            var мТекстовыеДанные = ТекстЗапроса;
            var Разделитель = "";
            string Метод = "";
            string Путь = "";

            var GETСтруктура = Структура.Новый();

            while (Истина)
            {
                var П = Найти(мТекстовыеДанные, Символы.ПС);
                if (П == 0)
                {
                    break;
                }

                var Подстрока = Лев(мТекстовыеДанные, П);
                мТекстовыеДанные = Прав(мТекстовыеДанные, Стр.Длина(мТекстовыеДанные) - П);

                // Разбираем ключ значение
                if (Найти(Подстрока, "HTTP/1") > 0)
                {
                    // Это строка протокола
                    // Определим метод
                    var П1 = 0;
                    if (Лев(Подстрока, 3) == "GET")
                    {
                        Метод = "GET";
                        П1 = 3;
                    }
                    else if (Лев(Подстрока, 4) == "POST")
                    {
                        Метод = "POST";
                        П1 = 4;
                    }
                    else if (Лев(Подстрока, 3) == "PUT")
                    {
                        Метод = "PUT";
                        П1 = 3;
                    }
                    else if (Лев(Подстрока, 6) == "DELETE")
                    {
                        Метод = "DELETE";
                        П1 = 6;
                    }
                    Заголовок.Вставить("Method", Метод);

                    // Определим Путь
                    var П2 = Найти(Подстрока, "HTTP/1");
                    Путь = СокрЛП(Сред(Подстрока, П1 + 1, Стр.Длина(Подстрока) - 10 - П1));
                    Заголовок.Вставить("Path", Путь);
                }
                else
                {
                    if (Подстрока == Символы.ВК + Символы.ПС)
                    {
                        break;
                    }
                    else if (Найти(Подстрока, ":") > 0)
                    {
                        var П3 = Найти(Подстрока, ":");
                        var Ключ = СокрЛП(Лев(Подстрока, П3 - 1));
                        var Значение = СокрЛП(Прав(Подстрока, Стр.Длина(Подстрока) - П3));
                        Заголовок.Вставить(Ключ, Значение);
                        if (Ключ == "Content-Type")
                        {
                            if (Лев(Значение, 20) == "multipart/form-data;")
                            {
                                Разделитель = "--" + Сред(Значение, 31);
                            }
                        }
                    }
                    else
                    {
                        var Ключ = "unknown";
                        var Значение = СокрЛП(Подстрока);
                        if (Стр.Длина(Значение) > 0)
                        {
                            Заголовок.Вставить(Ключ, Значение);
                        }
                    }
                }
            }

            if (Метод == "POST")
            {
                // обработать позже
                Заголовок.Вставить("POSTData", Структура.Новый());
                Заголовок.Вставить("Разделитель", Разделитель);
            }

            //ЛогСообщить(ПД);
            // Разбор пути на имена контроллеров
            Путь = СокрЛП(Заголовок.Получить("Path") as string);
            // var ПараметрыМетода = Новый_Массив();
            if (!(Путь == ""))
            {
                if (Лев(Путь, 1) == "/")
                {
                    Путь = Прав(Путь, Стр.Длина(Путь) - 1);
                }
                if (Прав(Путь, 1) != "/")
                {
                    Путь = Путь + "/";
                }
                var Сч = 0;
                while (Найти(Путь, "/") > 0)
                {
                    var П = Найти(Путь, "/");
                    Сч = Сч + 1;
                    var ЗначениеПараметра = РаскодироватьСтроку(Лев(Путь, П - 1), СпособКодированияСтроки.КодировкаURL);
                    Путь = Прав(Путь, Стр.Длина(Путь) - П);
                    if (Сч == 1)
                    {
                        ИмяКонтроллера = ЗначениеПараметра;
                    }
                    else if (Сч == 2)
                    {
                        ИмяМетода = ЗначениеПараметра;
                    }
                    else if (!(ЗначениеПараметра == ".."))
                    {
                        ИмяМетода = ОбъединитьПути(ИмяМетода, ЗначениеПараметра);
                    }
                }
                if (!(СокрЛП(ИмяМетода) == ""))
                {
                    if (Найти(ИмяМетода, "?") != 0)
                    {
                        var GETДанные = ИмяМетода;
                        ИмяМетода = Лев(GETДанные, Найти(GETДанные, "?") - 1);
                        GETДанные = Стр.Заменить(GETДанные, ИмяМетода + "?", "") + "&";

                        // Разбираем данные гет
                        while (Найти(GETДанные, "&") > 0)
                        {
                            var П1 = Найти(GETДанные, "&");
                            var П2 = Найти(GETДанные, "=");
                            var Ключ = Лев(GETДанные, П2 - 1);
                            var Значение = Сред(GETДанные, П2 + 1, П1 - (П2 + 1));
                            GETДанные = Прав(GETДанные, Стр.Длина(GETДанные) - П1);
                            if (!(Ключ == ""))
                            {
                                GETСтруктура.Вставить(Ключ, РаскодироватьСтроку(Значение, СпособКодированияСтроки.КодировкаURL));
                            }
                        }
                    }
                }
            }
            Заголовок.Вставить("GETData", GETСтруктура);
            var Запрос = new Запрос();
            Запрос.Вставить("Заголовок", Заголовок);
            Запрос.Вставить("ИмяКонтроллера", "" + ИмяКонтроллера);
            Запрос.Вставить("ИмяМетода", "" + ИмяМетода);
            // Запрос.Вставить("ПараметрыМетода", ПараметрыМетода);

            return Запрос;

        } // РазобратьЗапросКлиента()


        object ОбработатьЗапросКлиента(Запрос Запрос, TCPСоединение Соединение)
        {
            var Метод = Запрос.Заголовок.Получить("Method") as string;

            if (!(Метод == ""))
            {
                var ПараметрыЗапроса = Запрос.Заголовок.Получить(Метод + "Data") as Структура;

                if (ПараметрыЗапроса == Неопределено)
                {
                    return Неопределено;
                }

                var Задача = new Задача();
                var ИдЗадачи = "" + ПолучитьИД();
                Задача.Вставить("ИдЗадачи", ИдЗадачи);
                Задача.Вставить("структКонтроллер", Неопределено);
                Задача.Вставить("ВремяНачало", ТекущаяУниверсальнаяДатаВМиллисекундах());
                Задача.Вставить("Соединение", Соединение);
                Задача.Вставить("ИдКонтроллера", Неопределено);
                Задача.Вставить("Результат", Неопределено);
                Задача.Вставить("Этап", (Метод == "POST") ? "Данные" : "Новая");
                Задача.Вставить("УдаленныйУзел", УдаленныйУзелАдрес(Соединение.УдаленныйУзел));
                Задача.Вставить("Заголовок", Запрос.Заголовок);
                ПараметрыЗапроса.Вставить("УдаленныйУзел", Задача.УдаленныйУзел);
                ПараметрыЗапроса.Вставить("ИмяМетода", Запрос.ИмяМетода);
                ПараметрыЗапроса.Вставить("ИмяКонтроллера", Запрос.ИмяКонтроллера);
                Задача.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);

                if (ПараметрыЗапроса.Свойство("cmd", out var cmd))
                    if (cmd as string == "upddata")
                        Задача.Вставить("upddata", "");

                if (Запрос.ИмяКонтроллера == "resource")
                {
                    // запрос к файлам сервера
                    Задача.Вставить("ИмяДанных", ОбъединитьПути(Запрос.ИмяКонтроллера, Запрос.ИмяМетода));
                    Задача.Вставить("Результат", "Файл");
                    Задача.Этап = "Обработка";
                }
                else if (Запрос.ИмяКонтроллера == "favicon.ico" || Запрос.ИмяКонтроллера == "robots.txt")
                {
                    // запрос к файлам сервера
                    Задача.Вставить("ИмяДанных", ОбъединитьПути("resource", Запрос.ИмяКонтроллера));
                    Задача.Вставить("Результат", "Файл");
                    Задача.Этап = "Обработка";
                }

                Задачи.Вставить(Задача.ИдЗадачи, Задача);
                мЗадачи.Добавить(Задача);
                ЛогСообщить(Задача.УдаленныйУзел + " -> taskid=" + Задача.ИдЗадачи + " " + СокрЛП(Запрос.Заголовок.Получить("Method") as string) + " " + Запрос.Заголовок.Получить("Path"));

            }

            return Неопределено;

        } // ОбработатьЗапросКлиента()


        void РазобратьДанныеЗапроса(Задача Задача)
        {

            Структура POSTСтруктура = Задача.ПараметрыЗапроса;
            string Содержимое = Задача.Заголовок.Получить("Content-Type") as string;
            if (Содержимое != null)
            {
                if (Содержимое == "text/plain;charset=UTF-8")
                {
                    // параметры строкой
                    // Получим данные запроса
                    var POSTДанные = Задача.Соединение.ПолучитьСтроку();
                    
                    // Разбираем данные пост
                    if (Стр.Длина(POSTДанные) > 0)
                    {
                        POSTДанные = POSTДанные + "&";
                    }
                    while (Найти(POSTДанные, "&") > 0)
                    {
                        var П1 = Найти(POSTДанные, "&");
                        var П2 = Найти(POSTДанные, "=");
                        var Ключ = Лев(POSTДанные, П2 - 1);
                        var Значение = Сред(POSTДанные, П2 + 1, П1 - (П2 + 1));
                        POSTДанные = Прав(POSTДанные, Стр.Длина(POSTДанные) - П1);
                        if (!(Ключ == ""))
                        {
                            POSTСтруктура.Вставить(Ключ, РаскодироватьСтроку(Значение, СпособКодированияСтроки.КодировкаURL));
                        }
                    }
                }
                else if (Лев(Содержимое, 20) == "multipart/form-data;")
                {
                    // параметры формы
                    string Разделитель = Задача.Заголовок.Получить("Разделитель") as string;
                    string мТекстовыеДанные = Задача.Соединение.ПолучитьСтроку("windows-1251");
                    while (Истина)
                    {
                        var П = Найти(мТекстовыеДанные, Разделитель);
                        if (П == 0)
                        {
                            break;
                        }
                        var Подстрока = Лев(мТекстовыеДанные, П);
                        мТекстовыеДанные = Прав(мТекстовыеДанные, Стр.Длина(мТекстовыеДанные) - П - Стр.Длина(Разделитель) - 1);
                        if (Найти(Подстрока, "Content-Disposition: form-data;") != 0)
                        {
                            var П1 = Найти(Подстрока, "name=");
                            var П2 = Найти(Подстрока, Символы.ПС);
                            var П3 = Найти(Подстрока, Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС);
                            var П4 = Найти(Подстрока, "; filename");
                            string Ключ;
                            object Значение;
                            if (!(П4 == 0))
                            {
                                Значение = ПолучитьДвоичныеДанныеИзСтроки(Сред(Подстрока, П3 + 4, Стр.Длина(Подстрока) - П3 - 6), "windows-1251");
                                POSTСтруктура.Вставить("filename", РаскодироватьСтроку(Сред(Подстрока, П4 + 12, П2 - П4 - 14), СпособКодированияСтроки.КодировкаURL));
                                Ключ = Сред(Подстрока, П1 + 6, П4 - П1 - 7);
                            }
                            else
                            {
                                Ключ = Сред(Подстрока, П1 + 6, П2 - П1 - 8);
                                Значение = РаскодироватьСтроку(Сред(Подстрока, П2 + 3, Стр.Длина(Подстрока) - П2 - 5), СпособКодированияСтроки.КодировкаURL);
                            }
                            if (!(Ключ == ""))
                            {
                                POSTСтруктура.Вставить(Ключ, Значение);
                            }
                        }
                    }
                }
                else if (Лев(Содержимое, 24)  == "application/octet-stream")
                {
                    // двоичные данные
                    // Получим данные запроса
                    POSTСтруктура.Вставить("Данные", Задача.Соединение.ПолучитьДвоичныеДанные());
                }
            }

        } // РазобратьДанныеЗапроса()


        void ОбработатьОтветСервера(Задача Задача)
        {
            string ИмяФайла;
            try
            {
                var СтатусОтвета = 200;
                var Заголовок = Соответствие.Новый();
                ДвоичныеДанные ДвоичныеДанныеОтвета = null;
                if (Задача.Результат is ДвоичныеДанные)
                {
                    ДвоичныеДанныеОтвета = Задача.Результат as ДвоичныеДанные;
                }
                else if (Задача.Результат is string)
                {
                    ДвоичныеДанныеОтвета = ПолучитьДвоичныеДанныеИзСтроки(Задача.Результат as string);
                    Заголовок.Вставить("Content-Type", "text/html");
                    //Заголовок.Вставить("taskid", Задача.ИдЗадачи);
                }

                // Разбор маршрута
                if (Задача.Свойство("ИмяДанных"))
                {

                    ИмяФайла = ОбъединитьПути(ТекущийКаталог(), Задача.ИмяДанных);

                    //ЛогСообщить(ИмяФайла);

                    var файл = Файл.Новый(ИмяФайла);
                    var Расширение = файл.Расширение;

                    if (!(файл.Существует()))
                    {
                        ИмяФайла = Стр.Заменить(ИмяФайла, "/", @"\");
                        файл = Файл.Новый(ИмяФайла);
                    }

                    if (!(файл.Существует()))
                    {
                        СтатусОтвета = 404;
                    }

                    if (СтатусОтвета == 200)
                    {
                        var MIME = СоответствиеРасширенийТипамMIME.Получить(Расширение);
                        if (MIME == Неопределено)
                        {
                            MIME = СоответствиеРасширенийТипамMIME.Получить("default");
                        }
                        ДвоичныеДанныеОтвета = new ДвоичныеДанные(СокрЛП(ИмяФайла));
                        Заголовок.Вставить("Content-Length", ДвоичныеДанныеОтвета.Размер());
                        Заголовок.Вставить("Content-Type", MIME);
                    }
                }

                //Если Задача.Соединение.Активно Тогда

                try
                {
                    var мДанные = Массив.Новый();
                    var ПС = Символы.ВК + Символы.ПС;
        
                    if (Задача.Свойство("ContentType"))
                    {
                        Заголовок.Вставить("Content-Type", Задача["ContentType"]);
                    }
                    
                    Заголовок.Вставить("Content-Length", ДвоичныеДанныеОтвета.Размер());

                    if (keep_alive)
                        Заголовок.Вставить("Connection", "keep-alive");
                    else
                        Заголовок.Вставить("Connection", "close");

                    var ТекстОтветаКлиенту = СокрЛП(СтатусыHTTP.Получить(СтатусОтвета) as string) + ПС;

                    foreach (КлючИЗначение СтрокаЗаголовкаответа in Заголовок)
                    {
                        ТекстОтветаКлиенту = ТекстОтветаКлиенту + СтрокаЗаголовкаответа.Ключ + ":" + СтрокаЗаголовкаответа.Значение + ПС;
                    }

                    мДанные.Добавить(ПолучитьДвоичныеДанныеИзСтроки(ТекстОтветаКлиенту + ПС));
                    //Сообщить(ТекстОтветаКлиенту);
                    мДанные.Добавить(ДвоичныеДанныеОтвета);

                    TCPСоединение Соединение = Задача.Соединение;
                    Соединение.ОтправитьДвоичныеДанныеАсинхронно(СоединитьДвоичныеДанные(мДанные));

                    Задача.Этап = "Вернуть";

                }
                catch (Exception e)
                {
                    Сообщить("webserver: " + ОписаниеОшибки(e));
                    Задача.Этап = "Удалить";
                }
            }
            catch (Exception e)
            {
                ЛогСообщить("Ошибка формирования ответа");
                ЛогСообщить(ОписаниеОшибки(e));
                Задача.Этап = "Удалить";
            }

        } // ОбработатьОтветСервера()


        void ОбработатьЗадачи()
        {

            var НачалоЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах();

            var к = мЗадачи.Количество();
            while (к > 0 && !(ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла > 50))
            {
                к = к - 1;
                var Задача = мЗадачи.Получить(0) as Задача;
                мЗадачи.Удалить(0);

                if (Задача.Этап == "Данные")
                {
                    if (Задача.Соединение.Статус == "Данные")
                    {
                        if ((int)Число(Задача.Заголовок.Получить("Content-Length")) == Задача.Соединение.Длина)
                        {
                            РазобратьДанныеЗапроса(Задача);
                            Задача.Этап = "Новая";
                        }
                    }
                    else if (Лев(Задача.Соединение.Статус, 6)  == "Ошибка")
                    {
                        ЛогСообщить("ИдЗадачи=" + Задача.ИдЗадачи);
                        ЛогСообщить(Задача.Соединение.Статус);
                        Задача.Этап = "Завершить";
                    }

                }

                if (Задача.Этап == "Новая")
                {
                    Задача.Соединение.Статус = "Готов";
                    var ПарИдКонтроллера = "";
                    var ИмяКонтроллера = Задача.ПараметрыЗапроса["ИмяКонтроллера"] as string;

                    if (ИмяКонтроллера == "ext") // внешний контроллер
                    {
                        Структура ПараметрыЗапроса = Задача.ПараметрыЗапроса;
                        if (!ПараметрыЗапроса.Свойство("Данные")) // ожидает задачи
                        {
                            Задача.Результат = ext;
                            ext = "";
                            Задача.Этап = "Обработка";
                        }
                        else // получен ответ
                        {
                            var par = Стр.Разделить(Задача.Заголовок.Получить("params") as string, ";");
                            var стрРез = Новый.Структура("ИдЗадачи, РезультатДанные", par[2], ПараметрыЗапроса["Данные"] as ДвоичныеДанные);
                            var структКонтроллер = Контроллеры.Получить(par[1]) as Контроллер;
                            if (!(структКонтроллер == Неопределено))
                            {
                                if (!(ПередатьДанные(структКонтроллер.Хост, структКонтроллер.Порт, стрРез) == Неопределено))
                                {
                                    Задача.Результат = "";
                                    Задача.Этап = "Обработка";
                                }
                            }
                        }
                    }
                    else
                    {
                        if (ИмяКонтроллера == "procid")
                        {
                            // конкретный процесс
                            ПарИдКонтроллера = Задача.ПараметрыЗапроса["ИмяМетода"] as string;
                            if (Контроллеры.Получить(ПарИдКонтроллера) == Неопределено)
                            {
                                ПарИдКонтроллера = "";
                            }
                        }
                        else
                        {
                            if (ИмяКонтроллера == "" || ИмяКонтроллера == "doc")
                            {
                                // общий процесс
                                ПарИдКонтроллера = "1";
                            }
                            else
                            {
                                ПарИдКонтроллера = "" + ПолучитьИД();
                            }
                            if (Контроллеры.Получить(ПарИдКонтроллера) == Неопределено)
                            {
                                if (ПередатьДанные((string)Параметры["Хост"], (int)Параметры["ПортС"], Структура.Новый("procid, cmd", ПарИдКонтроллера, "startproc")) != Неопределено)
                                {
                                    Сообщить("webserver: новый процесс");
                                    Контроллеры.Вставить(ПарИдКонтроллера, "");
                                }
                                else
                                {
                                    Сообщить("webserver: ошибка создания процесса");
                                    ПарИдКонтроллера = "";
                                }
                            }
                        }
                        if (!(ПарИдКонтроллера == ""))
                        {
                            Задача.ИдКонтроллера = ПарИдКонтроллера;
                            Задача.Этап = "Ожидание";
                        }
                        else
                        {
                            Задача.Результат = ПолучитьДвоичныеДанныеИзСтроки("<div id='container' class='container-fluid data'>wrong session id</div><script>aupd=false; setTimeout(function(){window.location.replace('/');},1000);</script><end/>");
                            Задача.Этап = "Обработка";
                        }
                    }
                }

                if (Задача.Этап == "Ожидание")
                {
                    var структКонтроллер = Контроллеры.Получить(Задача.ИдКонтроллера) as Контроллер;
                    if (!(структКонтроллер == Неопределено))
                    {
                        структКонтроллер.Вставить("ВремяНачало", ТекущаяУниверсальнаяДатаВМиллисекундах());
                        Задача.Вставить("структКонтроллер", структКонтроллер);
                        Задача.Вставить("ВремяНачало", ТекущаяУниверсальнаяДатаВМиллисекундах());
                        Задача.ПараметрыЗапроса.Вставить("taskid", Задача.ИдЗадачи);
                        Задача.Этап = "Передать";
                    }
                }

                if (Задача.Этап == "Передать")
                {
                    if (!(ПередатьДанные(Задача.структКонтроллер.Хост, Задача.структКонтроллер.Порт, Задача.ПараметрыЗапроса) == Неопределено))
                    {
                        Задача.Этап = "Обработка";
                    }
                }

                if (Задача.Этап == "Обработка")
                {

                    if (!(Задача.Результат == Неопределено))
                    {
                        if (Задача.Свойство("upddata")) 
                        {
                            var ПС = Символы.ВК + Символы.ПС;
                            var дРезультат = Новый.Массив();
                            if (!Задача.Свойство("Заголовки"))
                            {
                                дРезультат.Добавить(ПолучитьДвоичныеДанныеИзСтроки("HTTP/1.1 200 OK" + ПС));
                                дРезультат.Добавить(ПолучитьДвоичныеДанныеИзСтроки("Connection: close" + ПС));
                                дРезультат.Добавить(ПолучитьДвоичныеДанныеИзСтроки("Content-Type: text/html" + ПС));
                                дРезультат.Добавить(ПолучитьДвоичныеДанныеИзСтроки("Transfer-Encoding: chunked" + ПС + ПС));
                                Задача.Вставить("Заголовки", "");
                            }

                            var Кусок = Задача.Результат as ДвоичныеДанные;
                            дРезультат.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Кусок.Размер().ToString("X") + ПС));
                            дРезультат.Добавить(Кусок);
                            дРезультат.Добавить(ПолучитьДвоичныеДанныеИзСтроки(ПС));
                            TCPСоединение Соединение = Задача.Соединение;
                            Соединение.ОтправитьДвоичныеДанныеАсинхронно(СоединитьДвоичныеДанные(дРезультат));
                            Задача.Результат = Неопределено;
                            Сообщить("webserver upddata " + Задача.ИдКонтроллера);
                            if (Кусок.Размер() == 0) 
                            {
                                Соединение.Закрыть();
                                Задача.Этап = "Завершить";
                            }
                       }
                        else
                            ОбработатьОтветСервера(Задача);
                    } 
                }

                if (Задача.Этап == "Вернуть")
                {
                    if (!(Задача.Соединение.Статус == "Запись"))
                    {
                        TCPСоединение Соединение = Задача.Соединение;
                        if (Соединение.Активно && keep_alive)
                            Соединения.Добавить(Соединение);
                        else
                            Соединение.Закрыть();

                        Задача.Соединение = null;
                        Задача.Этап = "Завершить";
                    }
                }

                if (Задача.Этап == "Завершить")
                {
                    Задачи.Удалить(Задача.ИдЗадачи);
                    ЛогСообщить("<- taskid=" + СокрЛП(Задача.ИдЗадачи) + " time=" + Цел(ТекущаяУниверсальнаяДатаВМиллисекундах() - Задача.ВремяНачало) + Загрузка + Задачи.Количество() + " tasks");
                    continue;
                }

                мЗадачи.Добавить(Задача);

            }
        } // ОбработатьЗадачи()


        void ЛогСообщить(string Сообщение, int Тип = 0)
        {
            Сообщить("" + ТекущаяДата() + " " + Сообщение);
            // // Если нужен лог
            // Если НЕ Параметры = Неопределено Тогда
            // 	Сообщения.Добавить(Новый Структура("БазаДанных, Заголовок, Команда", "web", Новый Структура("Тип, Сообщение", Тип, Сообщение), "ЗаписатьЗаголовок"));
            // КонецЕсли;
        } // ЛогСообщить()


        void УдалитьКонтроллерИЗадачи(Контроллер структКонтроллер)
        {
            Контроллеры.Удалить(структКонтроллер.ИдКонтроллера);
            foreach (КлючИЗначение элЗадача in Задачи)
            {
                var Задача = элЗадача.Значение as Задача;
                if (Задача.структКонтроллер == структКонтроллер)
                {
                    Задача.Этап = "Вернуть";
                }
            }
        } // УдалитьКонтроллерИЗадачи()


        void ОбработатьСоединения()
        {
            //var Версия = "0.0.1";

            Порт = 8888;
            var ПортО = 8889;

            if (АргументыКоманднойСтроки.Length > 1)
            {
                ПортО = (int)Число(АргументыКоманднойСтроки[0]);
                Порт = (int)Число(АргументыКоманднойСтроки[1]);
            }

            var Таймаут = 5;

            keep_alive = true;

            var TCPСервер = new TCPСервер(Порт, Истина);
            TCPСервер.ЗапуститьАсинхронно();
            ЛогСообщить("Веб-сервер запущен на порту: " + Порт);

            var TCPСерверО = new TCPСервер(ПортО);
            TCPСерверО.ЗапуститьАсинхронно();
            ЛогСообщить("Ответы на порту: " + ПортО);

            ОстановитьСервер = Ложь;
            TCPСоединение Соединение;

            Задачи = Соответствие.Новый();
            мЗадачи = Массив.Новый();
            Контроллеры = Соответствие.Новый();
            Сообщения = Массив.Новый();

            Соединения = Массив.Новый();
            СоединенияО = Массив.Новый();

            var СуммаЦиклов = 0;
            var РабочийЦикл = 0;
            var ЗамерВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
            var Загрузка = " ";

            while (!(ОстановитьСервер))
            {
                var НачалоЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах();
                СуммаЦиклов = СуммаЦиклов + 1;

                if (СуммаЦиклов > 999)
                {
                    var ПредЗамер = ЗамерВремени;
                    ЗамерВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
                    Загрузка = " " + РабочийЦикл / 10 + "% " + Цел(1000 * РабочийЦикл / (ЗамерВремени - ПредЗамер)) + " q/s ";
                    СуммаЦиклов = 0;
                    РабочийЦикл = 0;
                }

                // Ожидаем ответ контроллера
                Соединение = TCPСерверО.ПолучитьСоединение(5);
                if (!(Соединение == Неопределено))
                {
                    СоединенияО.Добавить(Соединение);
                    Таймаут = 5;
                }

                var к = СоединенияО.Количество();
                while (к > 0)
                {
                    к = к - 1;
                    Соединение = (TCPСоединение)СоединенияО.Получить(0);
                    СоединенияО.Удалить(0);

                    if (Соединение.Статус == "Данные")
                    {
                        Структура КонтроллерЗапрос = null;
                        try
                        {
                            var дд = Соединение.ПолучитьДвоичныеДанные();
                            КонтроллерЗапрос = ДвоичныеДанныеВСтруктуру(дд) as Структура;
                            Таймаут = 5;
                        }
                        catch (Exception e)
                        {
                            Сообщить("webserver: " + ОписаниеОшибки(e));
                        }
                        if (!(КонтроллерЗапрос == Неопределено))
                        {
                            if (КонтроллерЗапрос.Свойство("procid"))
                            {
                                var структКонтроллер = Контроллеры.Получить(КонтроллерЗапрос["procid"]) as Контроллер;
                                if (КонтроллерЗапрос.Свойство("cmd"))
                                {
                                    var cmd = КонтроллерЗапрос["cmd"] as string;
                                    Сообщить("webserver: " + cmd);
                                    if (cmd == "termproc")
                                    {
                                        // удалить контроллер
                                        if (!(структКонтроллер == Неопределено))
                                        {
                                            УдалитьКонтроллерИЗадачи(структКонтроллер);
                                        }
                                    }
                                    else if (cmd == "init")
                                    {
                                        // зарегистрировать контроллер
                                        if (структКонтроллер == Неопределено)
                                        {
                                            ЛогСообщить("Подключен контроллер procid=" + КонтроллерЗапрос["procid"]);
                                            структКонтроллер = new Контроллер("ИдКонтроллера, Хост, Порт, ВремяНачало", КонтроллерЗапрос["procid"], КонтроллерЗапрос["Хост"], КонтроллерЗапрос["Порт"], ТекущаяУниверсальнаяДатаВМиллисекундах());
                                            Контроллеры.Вставить(КонтроллерЗапрос["procid"], структКонтроллер);
                                        }
                                    }
                                    else if (cmd == "ext") // задача для внешнего контроллера
                                    {
                                        ext = КонтроллерЗапрос["Параметры"] as string;
                                    }
                                }
                                
                                if (КонтроллерЗапрос.Свойство("taskid"))
                                {
                                    var Задача = Задачи.Получить(КонтроллерЗапрос["taskid"]) as Задача;
                                    if (!(Задача == Неопределено))
                                    {
                                        if (КонтроллерЗапрос.Свойство("ContentType")) Задача.Вставить("ContentType", КонтроллерЗапрос["ContentType"] as string);
                                        Задача.Результат = КонтроллерЗапрос["Результат"];
                                    }
                                }
                            }

                            else if (КонтроллерЗапрос.Свойство("cmd"))
                            {
                                var cmd = КонтроллерЗапрос["cmd"] as string;
                                
                                if (cmd == "stopserver")
                                {
                                    ОстановитьСервер = Истина;
                                }
                                else if (cmd == "init")
                                {
                                    if (Параметры == Неопределено)
                                    {
                                        Сообщить("Получены параметры");
                                        Параметры = КонтроллерЗапрос;
                                    }
                                }
                            }
                        }

                        РабочийЦикл = РабочийЦикл + 1;
                        //Соединение.Закрыть();
                        //continue;

                    }

                    else if (Соединение.Статус == "Ошибка")
                    {
                        Соединение.Закрыть();
                        continue;
                    }

                    СоединенияО.Добавить(Соединение);

                }

                if (Параметры == Неопределено)
                {
                    Приостановить(50);
                    continue;
                }

                // Ожидаем подключение клиента
                Соединение = TCPСервер.ПолучитьСоединение(Таймаут);
                if (!(Соединение == Неопределено))
                {
                    Соединения.Добавить(Соединение);
                    Таймаут = 5;
                    //Сообщить("+ соединение " + Соединения.Количество());
                }

                к = Соединения.Количество();
                while (к > 0)
                {
                    к = к - 1;
                    Соединение = (TCPСоединение)Соединения.Получить(0);
                    Соединения.Удалить(0);

                    if (Соединение.Статус == "Данные")
                    {
                        try
                        {
                            var ТекстовыеДанныеВходящие = Соединение.ПолучитьЗаголовки();
                            Таймаут = 5;
                            //Сообщить(ТекстовыеДанныеВходящие);
                            if (!(ТекстовыеДанныеВходящие == ""))
                            {
                                // Запрос http
                                var Запрос = РазобратьЗапросКлиента(ТекстовыеДанныеВходящие, Соединение);
                                ОбработатьЗапросКлиента(Запрос as Запрос, Соединение);
                                //Сообщить("webserver: всего задач " + Задачи.Количество());
                                continue;
                            }
                        }
                        catch (Exception e)
                        {
                            Сообщить("webserver: " + ОписаниеОшибки(e));
                        }
                    }
                    else if (Соединение.Статус == "Ошибка")
                    {
                        Сообщить("webserver: ошибка соединения");
                    }

                    if (Соединение.Активно) 
                        Соединения.Добавить(Соединение);
                    else
                        Соединение.Закрыть();
                }

                if (Задачи.Количество() != 0)
                {
                    ОбработатьЗадачи();
                    РабочийЦикл = РабочийЦикл + 1;
                }

                if (Сообщения.Количество() != 0)
                {
                    ПередатьДанные((string)Параметры["Хост"], (int)Параметры["ПортД"], (Структура)Сообщения.Получить(0));
                    Сообщения.Удалить(0);
                }

                var ВремяЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла;
                if (ВремяЦикла > 100)
                {
                    Сообщить("!webserver ВремяЦикла=" + ВремяЦикла);
                }
                if (Таймаут < 50)
                {
                    Таймаут = Таймаут + 1;
                }
            }

            TCPСервер.Остановить();
            TCPСерверО.Остановить();

        } // ОбработатьСоединения()

        public void Main()
        {
            СтатусыHTTP = Соответствие.Новый();
            СтатусыHTTP.Вставить(200, "HTTP/1.1 200 OK");
            СтатусыHTTP.Вставить(400, "HTTP/1.1 400 Bad Request");
            СтатусыHTTP.Вставить(401, "HTTP/1.1 401 Unauthorized");
            СтатусыHTTP.Вставить(402, "HTTP/1.1 402 Payment Required");
            СтатусыHTTP.Вставить(403, "HTTP/1.1 403 Forbidden");
            СтатусыHTTP.Вставить(404, "HTTP/1.1 404 Not Found");
            СтатусыHTTP.Вставить(405, "HTTP/1.1 405 Method Not Allowed");
            СтатусыHTTP.Вставить(406, "HTTP/1.1 406 Not Acceptable");
            СтатусыHTTP.Вставить(500, "HTTP/1.1 500 Internal Server Error");
            СтатусыHTTP.Вставить(501, "HTTP/1.1 501 Not Implemented");
            СтатусыHTTP.Вставить(502, "HTTP/1.1 502 Bad Gateway");
            СтатусыHTTP.Вставить(503, "HTTP/1.1 503 Service Unavailable");
            СтатусыHTTP.Вставить(504, "HTTP/1.1 504 Gateway Timeout");
            СтатусыHTTP.Вставить(505, "HTTP/1.1 505 HTTP Version Not Supported");
            СоответствиеРасширенийТипамMIME = Соответствие.Новый();
            СоответствиеРасширенийТипамMIME.Вставить(".html", "text/html");
            СоответствиеРасширенийТипамMIME.Вставить(".css", "text/css");
            СоответствиеРасширенийТипамMIME.Вставить(".js", "text/javascript");
            СоответствиеРасширенийТипамMIME.Вставить(".jpg", "image/jpeg");
            СоответствиеРасширенийТипамMIME.Вставить(".svg", "image/svg+xml");
            СоответствиеРасширенийТипамMIME.Вставить(".jpeg", "image/jpeg");
            СоответствиеРасширенийТипамMIME.Вставить(".png", "image/png");
            СоответствиеРасширенийТипамMIME.Вставить(".gif", "image/gif");
            СоответствиеРасширенийТипамMIME.Вставить(".ico", "image/x-icon");
            СоответствиеРасширенийТипамMIME.Вставить(".zip", "application/x-compressed");
            СоответствиеРасширенийТипамMIME.Вставить(".rar", "application/x-compressed");
            СоответствиеРасширенийТипамMIME.Вставить("default", "text/plain");
            ОбработатьСоединения();
        }

    }

}
