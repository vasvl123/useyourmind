// /*----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------*/
// Идея интерпретатора https://github.com/tsukanov-as/kojura

using System;


namespace onesharp
{
    public class treedata : pagedata
    {
        public treedata ЭтотОбъект { get { return this; } }

        treedb Данные;

        //public string БазаДанных;
        //public string ИмяДанных;
        //public string ПозицияДанных;

        //int КодУзла;
        //public Соответствие Узлы;
        //bool Изменены;
        //public int сКоличество;
        //public int Количество;
        //public Узел Пустой = null;
        ////Перем Очередь;
        ////Перем Значения;
        //decimal НачалоЦикла;
        //public Массив ОбъектыОбновить;
        //public string Представление;
        //public Ishowdata Процесс;
        //public Узел Корень;
        //Структура НетЗначения;
        //Соответствие ВсеСвязи;
        //Соответствие Версии;

        //public string ИстДанных;

        Массив МассивИзСтроки(string стр)
        {
            var м = Массив.Новый();
            м.Добавить(1);
            var дстр = Стр.Длина(стр);
            for (int н = 1; н <= дстр; н++)
            {
                м.Добавить(КодСимвола(Сред(стр, н, 1)));
            }
            return м;
        } // МассивИзСтроки()


        //Структура СтрокуВСтруктуру(string стр)
        //{
        //    var мСтр = Стр.Разделить(стр, Символы.Таб);
        //    var Ключ = Неопределено;
        //    var Рез = Структура.Новый();
        //    foreach (string знСтр in мСтр)
        //    {
        //        if (Ключ == Неопределено)
        //        {
        //            Ключ = знСтр;
        //        }
        //        else
        //        {
        //            Рез.Вставить((string)Ключ, знСтр);
        //            Ключ = Неопределено;
        //        }
        //    }
        //    return Рез;
        //}


        //public Структура СвойстваВСтуктуру(Узел УзелСвойства)
        //{
        //    var Результат = Структура.Новый();
        //    var св = УзелСвойства.Дочерний;
        //    while (!(св == Неопределено))
        //    {
        //        string ИмяСвойства = св.Имя;
        //        if (Прав(ИмяСвойства, 1) == ".")
        //        { // группа свойств
        //            ИмяСвойства = Лев(ИмяСвойства, Стр.Длина(ИмяСвойства) - 1);
        //            Результат.Вставить(ИмяСвойства, СвойстваВСтуктуру(св));
        //        }
        //        else
        //        {
        //            Результат.Вставить(ИмяСвойства, ЗначениеСвойства(св));
        //        }
        //        св = св.Соседний;
        //    }
        //    return Результат;
        //}


        //public Узел ИмяЗначение(string Имя = "", object _Значение = null)
        //{
        //    var Значение = (_Значение is null) ? "" : _Значение;
        //    return Узел.Новый("Имя, Значение", Имя, Значение);
        //}


        //string СтруктуруВСтроку(object знСтруктура)
        //{
        //    if (!(знСтруктура is Структура))
        //    {
        //        return (string)знСтруктура;
        //    }
        //    var Результат = "";
        //    foreach (КлючИЗначение Элемент in (Структура)знСтруктура)
        //    {
        //        var Ключ = Элемент.Ключ as string;
        //        var Значение = Элемент.Значение;

        //        if (Ключ == "Код" || Ключ == "Старший" || Ключ == "Родитель")
        //        {
        //            continue;
        //        }
        //        else if (Ключ == "Имя")
        //        {
        //            Ключ = "И";
        //        }
        //        else if (Ключ == "Значение")
        //        {
        //            Ключ = "З";
        //            Значение = Стр.Заменить(Значение.ToString(), Символы.Таб, "#x9");
        //            Значение = Стр.Заменить(Значение as string, Символы.ПС, "#xA");
        //            Значение = Стр.Заменить(Значение as string, Символы.ВК, "#xD");
        //            // ИначеЕсли Ключ = "сДочерний" Тогда
        //            // 	Продолжить;
        //        }
        //        else if ("" + Значение == "")
        //        {
        //            continue;
        //        }
        //        else
        //        {
        //            if (Ключ == "Дочерний")
        //            {
        //                Ключ = "Д";
        //            }
        //            else if (Ключ == "Соседний")
        //            {
        //                Ключ = "С";
        //            }
        //            else if (Ключ == "Атрибут")
        //            {
        //                Ключ = "А";
        //            }
        //            else
        //            {
        //                continue;
        //            }
        //            if (Значение is Узел)
        //            {
        //                Значение = ((Узел)Значение).Код;
        //            }
        //            if (Лев((string)Значение, 1) == "s")
        //            {
        //                continue;
        //            }
        //        }
        //        Результат = Результат + ((Результат == "") ? "" : Символы.Таб) + Ключ + Символы.Таб + Значение;
        //    }
        //    return Результат;
        //}


        //public object УзелСвойство(Структура Узел, string Свойство)
        //{
        //    object УзелСвойство = null;
        //    if (!(Узел == Неопределено))
        //    {
        //        Узел.Свойство(Свойство, out УзелСвойство);
        //    }
        //    return УзелСвойство;
        //} // УзелСвойство(Узел)


        //public object ЗначениеСвойства(Структура знУзелСвойство, string Имя = null)
        //{
        //    var Значение = Неопределено;
 
        //    if (!(Имя is null))
        //    {
        //        знУзелСвойство = УзелСвойство(знУзелСвойство, Имя) as Структура;
        //    }
        //    if (!(знУзелСвойство == Неопределено))
        //    {
        //        var зУзел = знУзелСвойство as Узел;
        //        if (!(зУзел == Неопределено))
        //            if (!(зУзел.Имя == "Объект" || зУзел.Имя == "О"))
        //                зУзел = зУзел.Дочерний;
        //        if (!(зУзел == Неопределено))
        //        {
        //            Значение = Интерпретировать(зУзел, Неопределено, Ложь);
        //        }
        //        else
        //        {
        //            Значение = "" + УзелСвойство(знУзелСвойство, "Значение");
        //        }
        //    }
        //    return Значение;
        //} // ЗначениеСвойства()


        //string ПоказатьУзел(Узел Узел, string Атрибуты = "", string Дочерний = "", bool ЭтоАтрибут = false)
        //{
        //    var Представление = "";

        //    var УзелИмя = Узел.Имя;
        //    var УзелЗначение = "";
        //    if (Узел.Свойство("Значение"))
        //    {
        //        УзелЗначение = Строка(Узел.Значение);
        //    }

        //    if (ЭтоАтрибут)
        //    {

        //        if (!(Дочерний == ""))
        //        {
        //            УзелЗначение = Дочерний;
        //        }

        //        if (УзелИмя == "Строка")
        //        {
        //            Представление = " " + УзелЗначение;
        //        }
        //        else
        //        {
        //            var АтрибутИмя = Стр.Заменить(УзелИмя, "xml_lang", "xml:lang");
        //            АтрибутИмя = Стр.Заменить(АтрибутИмя, "_", "-");
        //            Представление = " " + АтрибутИмя + @"=""" + УзелЗначение + @"""";
        //        }

        //    }
        //    else
        //    {

        //        if (Узел.Имя == "comment")
        //        {
        //            Представление = "<!-- " + УзелЗначение + " -->";
        //        }
        //        else if (Узел.Имя == "br")
        //        {
        //            Представление = "<" + Узел.Имя + ">";
        //        }
        //        else
        //        {
        //            Представление = "<" + УзелИмя + Атрибуты + " id='" + "_" + Узел.Код + "'>";
        //            Представление = Представление + УзелЗначение;
        //            Представление = Представление + Дочерний + "</" + УзелИмя + ">";
        //        }

        //    }

        //    return Представление;

        //} // ПоказатьУзел()


        //// Создать копию ветки
        //public Узел КопироватьВетку(Узел Узел, treedata Цель, Узел Старший, Узел Родитель, bool ЭтоАтрибут = false, bool ПервыйВызов = true, bool знСлужебный = true, Структура ПараметрыЗамены = null)
        //{

        //    var ИмяУзла = УзелСвойство(Узел, "Имя");
        //    var ЗначениеУзла = УзелСвойство(Узел, "Значение");

        //    if (Цель == Неопределено)
        //    {
        //        Цель = ЭтотОбъект;
        //    }

        //    var КопияУзел = Цель.НовыйУзел(Узел.Новый("Имя, Значение, Старший, Родитель", ИмяУзла, ЗначениеУзла, Старший, Родитель), знСлужебный || Служебный(Узел));

        //    if (!(ЭтоАтрибут))
        //    {

        //        if (!(Узел.Атрибут == Неопределено))
        //        {
        //            var УзелАтрибут = КопироватьВетку(Узел.Атрибут, Цель, КопияУзел, КопияУзел, Истина, Ложь, знСлужебный || Служебный(Узел.Атрибут), ПараметрыЗамены);
        //            КопияУзел.Вставить("Атрибут", УзелАтрибут);
        //        }

        //    }

        //    if (Узел.Дочерний == Неопределено)
        //    {
        //        if ((string)ИмяУзла == "Узел")
        //        {
        //            if (!(ПараметрыЗамены == Неопределено))
        //            {
        //                var Параметр = УзелСвойство(ПараметрыЗамены, (string)ЗначениеУзла);
        //                if (Параметр is Узел)
        //                {
        //                    Узел.Дочерний = (Узел)Параметр;
        //                }
        //                else if (Параметр is string)
        //                {
        //                    КопияУзел.Вставить("Дочерний", Цель.НовыйУзел(Узел.Новый("Имя, Значение, Старший, Родитель", "Строка", Параметр, Узел, Узел), знСлужебный || Служебный(Узел)));
        //                }
        //            }
        //        }
        //    }

        //    if (!(Узел.Дочерний == Неопределено))
        //    {
        //        var УзелДочерний = КопироватьВетку(Узел.Дочерний, Цель, КопияУзел, КопияУзел, Ложь, Ложь, знСлужебный || Служебный(Узел.Дочерний), ПараметрыЗамены);
        //        КопияУзел.Вставить("Дочерний", УзелДочерний);
        //    }

        //    if (ПервыйВызов)
        //    {
        //        КопияУзел.Вставить("Соседний", Неопределено);
        //    }
        //    else
        //    {
        //        if (!(Узел.Соседний == Неопределено))
        //        {
        //            var УзелСоседний = КопироватьВетку(Узел.Соседний, Цель, КопияУзел, Родитель, ЭтоАтрибут, Ложь, знСлужебный || Служебный(Узел.Соседний), ПараметрыЗамены);
        //            КопияУзел.Вставить("Соседний", УзелСоседний);
        //        }
        //    }

        //    return КопияУзел;

        //} // КопироватьВетку()


        //bool СравнитьИмя(Узел Узел, string Тип, string Имя)
        //{
        //    if (Узел.Имя == "О" || Узел.Имя == "Объект")
        //    {
        //        var зн = "" + УзелСвойство(Узел, "Значение");
        //        if (!(зн == ""))
        //        {
        //            var м = Стр.Разделить(зн, " ");
        //            var оТип = м[0];
        //            var оИмя = м[0];
        //            if (м.Length == 2)
        //            { // полный путь
        //                оИмя = м[1];
        //            }
        //            if (((Тип == Имя) && (оТип == Тип || оИмя == Имя)) || ((оТип == Тип || Тип == "*") && (оИмя == Имя || Имя == "*")))
        //            {
        //                return Истина;
        //            }
        //        }
        //    }
        //    return Ложь;
        //} // СравнитьИмя()


        //object НайтиОбъекты(Узел Узел, string оПоз, string оТип, string оИмя)
        //{

        //    var Результаты = Массив.Новый();

        //    while (!(Узел == Неопределено))
        //    {
        //        if (Узел.Имя == "О" || Узел.Имя == "Объект")
        //        {
        //            break;
        //        }
        //        Узел = Узел.Родитель;
        //    }

        //    if (оПоз == "")
        //    { // свой объект
        //        Результаты.Добавить(Узел);
        //        return Результаты;
        //    }
        //    else if (оПоз == "р")
        //    { // найти родителя
        //        Узел = Узел.Родитель;
        //        while (!(Узел == Неопределено))
        //        {
        //            if (СравнитьИмя(Узел, оТип, оИмя))
        //            {
        //                Результаты.Добавить(Узел);
        //                return Результаты;
        //            }
        //            Узел = Узел.Родитель;
        //        }
        //        return Узел;
        //    }
        //    else if (оПоз == "д")
        //    { // найти дочернего
        //        Узел = Узел.Дочерний;
        //    }
        //    else if (оПоз == "с")
        //    { // найти соседнего
        //        Узел = Узел.Родитель.Дочерний;
        //    }

        //    while (!(Узел == Неопределено))
        //    {
        //        if (СравнитьИмя(Узел, оТип, оИмя))
        //        {
        //            Результаты.Добавить(Узел);
        //        }
        //        Узел = Узел.Соседний;
        //    }

        //    return Результаты; //Узел;

        //} // НайтиОбъекты(Узел, Путь)


        //Структура СвойствоОбъекта(Узел Узел, string ИмяСвойства)
        //{
        //    Узел Свойство = null;
        //    if (!(Узел == Неопределено))
        //    {
        //        Свойство = Узел.Дочерний;
        //        var МассивСвойства = Стр.Разделить(ИмяСвойства, ".");
        //        var к = 0;
        //        while (к < МассивСвойства.Length)
        //        {
        //            ИмяСвойства = МассивСвойства[к];
        //            var св = Свойство.Дочерний;

        //            while (!(св == Неопределено))
        //            {
        //                var ИмяУзла = св.Имя;
        //                if (Прав(ИмяУзла, 1) == ".")
        //                {
        //                    ИмяУзла = Лев(ИмяУзла, Стр.Длина(ИмяУзла) - 1);
        //                }
        //                if (ИмяСвойства == ИмяУзла)
        //                {
        //                    break;
        //                }
        //                св = св.Соседний;
        //            }

        //            Свойство = св;
        //            if (Свойство == Неопределено)
        //            {
        //                break;
        //            }

        //            к = к + 1;
        //        }
        //    }
        //    return Свойство;
        //} // СвойствоОбъекта()


        //Массив ПолучитьСвойстваПоСсылке(Узел Узел, object _Путь = null, bool СоздатьСвязь = false)
        //{
        //    var Путь = (_Путь == null) ? "" : (string)_Путь;

        //    var Результаты = Массив.Новый();
        //    var НачальныйУзел = Узел;

        //    if (Путь is string)
        //    {

        //        if (Путь == "")
        //        {
        //            Путь = "" + УзелСвойство(Узел, "Значение");
        //            if (Путь == "")
        //            {
        //                if (!(Узел.Дочерний == Неопределено))
        //                {
        //                    Путь = "" + Интерпретировать(Узел.Дочерний, Неопределено, Ложь);
        //                }
        //                if (Путь == "")
        //                {
        //                    return null;
        //                }
        //            }
        //        }

        //        var МассивПуть = Стр.Разделить(Путь, " ");
        //        var оПоз = "";
        //        var оТип = "*";
        //        var оИмя = "*";
        //        var сИмя = "";
        //        if (МассивПуть.Length == 4)
        //        { // полный путь
        //            оПоз = МассивПуть[0];
        //            оТип = МассивПуть[1];
        //            оИмя = МассивПуть[2];
        //            сИмя = МассивПуть[3];
        //        }
        //        else if (МассивПуть.Length == 3)
        //        { // тип или имя объекта
        //            оПоз = МассивПуть[0];
        //            оТип = МассивПуть[1];
        //            оИмя = МассивПуть[1];
        //            сИмя = МассивПуть[2];
        //        }
        //        else if (МассивПуть.Length == 2)
        //        { // свойство
        //            оПоз = МассивПуть[0];
        //            сИмя = МассивПуть[1];
        //        }
        //        else
        //        { // свое свойство
        //            сИмя = МассивПуть[0];
        //        }

        //        var Объекты = Массив.Новый();

        //        if (оПоз == "у")
        //        { // указатель на объект или свойство
        //            Узел = ПолучитьУзел(МассивПуть[1]);
        //            if (!(Узел == Неопределено))
        //            {
        //                if (МассивПуть.Length == 3)
        //                { // Указано имя свойства
        //                    Объекты.Добавить(Узел);
        //                }
        //                else
        //                {
        //                    Результаты.Добавить(Узел);
        //                }
        //            }
        //        }
        //        else
        //        { // найти по маске
        //            Объекты = (Массив)НайтиОбъекты(Узел, оПоз, оТип, оИмя);
        //            if (Объекты.Количество() == 0)
        //            {
        //                Сообщить("Объекты не найдены: " + Путь);
        //            }

        //        }

        //        foreach (Узел оУзел in Объекты)
        //        {
        //            var cУзел = оУзел;
        //            if (сИмя != "") 
        //            {
        //                cУзел = СвойствоОбъекта(оУзел, сИмя) as Узел;
        //                if (cУзел == Неопределено)
        //                {
        //                    Сообщить("Свойство не найдено: " + Путь);
        //                    continue;
        //                }
        //            }
        //            Результаты.Добавить(cУзел);
        //        }

        //    }
        //    else
        //    {

        //        Результаты.Добавить(Путь); // только чтобы создать связь

        //    }


        //    if (СоздатьСвязь == Истина)
        //    {

        //        foreach (Узел _Узел in Результаты)
        //        {
        //            // объект и свойство которые нужно добавить в связи для обновления
        //            var нОбъект = НачальныйУзел;
        //            var нСвойство = НачальныйУзел;
        //            while (!(нОбъект == Неопределено))
        //            {
        //                if (нОбъект.Имя == "О" || нОбъект.Имя == "Объект")
        //                {
        //                    break;
        //                }
        //                if (нСвойство == НачальныйУзел && Прав(нОбъект.Родитель.Имя, 1) == ".")
        //                { // группа свойств
        //                    нСвойство = нОбъект;
        //                }
        //                нОбъект = нОбъект.Родитель;
        //            }

        //            var сУзел = _Узел;
        //            var оУзел = сУзел;
        //            while (!(оУзел == Неопределено))
        //            {
        //                if (оУзел.Имя == "О" || оУзел.Имя == "Объект")
        //                {
        //                    break;
        //                }
        //                оУзел = оУзел.Родитель;
        //            }

        //            if (!(оУзел == нОбъект))
        //            { // свои свойства не обновлять
        //                var Связи = ВсеСвязи.Получить(сУзел) as Соответствие; // связанные свойства
        //                if (Связи == Неопределено)
        //                {
        //                    Связи = Соответствие.Новый();
        //                    ВсеСвязи.Вставить(сУзел, Связи);
        //                }
        //                //Сообщить("+Связи " + Узел.Код + " -> " + нОбъект.Код + " св. " + нСвойство.Код);
        //                Связи.Вставить(нСвойство, нОбъект);
        //            }

        //        }

        //    }

        //    return Результаты;

        //} // ПолучитьСвойстваПоСсылке()


        //public void ОбъектыОбновитьДобавить(Узел оУзел)
        //{
        //    var н = ОбъектыОбновить.Найти(оУзел);
        //    if (н != -1)
        //    {
        //        ОбъектыОбновить.Удалить(н);
        //    }
        //    ОбъектыОбновить.Добавить(оУзел);
        //}


        //public object ОбновитьПредставление(Узел Узел = null)
        //{

        //    try
        //    {
        //        НачалоЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах();

        //        //Представление = "";
        //        if (!(Узел == Неопределено))
        //        {
        //            //Сообщить("ОбновитьПредставление " + Узел.Код);
        //            return Интерпретировать(Узел, Неопределено, Ложь) as string;
        //        }
        //        else if (ОбъектыОбновить.Количество() != 0)
        //        {
        //            var к = ОбъектыОбновить.Количество();
        //            while (к > 0 && ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла < 50)
        //            {
        //                к = к - 1;
        //                Узел = ОбъектыОбновить.Получить(0) as Узел;
        //                ОбъектыОбновить.Удалить(0);
        //                var Результат = ОбработатьОбъект(Узел);
        //                if (Результат == Неопределено)
        //                {
        //                    ОбъектыОбновить.Добавить(Узел);
        //                }
        //                else if (ОбъектыОбновить.Найти(Узел) == -1)
        //                {
        //                    Представление = Представление + Результат;
        //                }
        //            }
        //        }

        //    }
        //    catch (Exception e)
        //    {
        //        ОбъектыОбновить.Очистить();
        //        Процесс.ЗаписатьСобытие("Интерпретатор", ОписаниеОшибки(e), 3);
        //        //УзелСостояниеЗначение(элУзел.Значение, "Ошибка", Истина);
        //    }

        //    return null;
        //}


        //public void ОбновитьУзел(Узел Узел)
        //{
        //    //Сообщить("ОбновитьУзел " + Узел.Код);
        //    var оУзел = Узел;
        //    ОбновитьСвязи(оУзел);
        //    while (!(оУзел == Неопределено))
        //    {
        //        if (оУзел.Имя == "О" || оУзел.Имя == "Объект")
        //        {
        //            //Сообщить("Объект " + оУзел.Код);
        //            var Изменения = УзелСвойство(оУзел, "Изменения") as Соответствие;
        //            if (!(Изменения == Неопределено))
        //            {
        //                Изменения.Вставить(Узел, Истина);
        //                ОбъектыОбновитьДобавить(оУзел);
        //                //Сообщить("+Изменения " + Узел.Код);
        //            }
        //            break;
        //        }
        //        оУзел = оУзел.Родитель;
        //    }
        //}


        //Структура ПолучитьАргументы(Узел Узел)
        //{
        //    object Значение = null;
        //    var Аргументы = Структура.Новый("ЭтотУзел", Узел);
        //    var Аргумент = Узел.Атрибут;
        //    while (!(Аргумент == Неопределено))
        //    {
        //        //УзелСостояниеЗначение(Аргумент, "ЭтоАтрибут", Истина); // для отслеживания источника изменений
        //        if (Аргумент.Имя == "Аргумент" || Аргумент.Имя == "А")
        //        {
        //            Аргументы.Вставить(Аргумент.Значение as string, Интерпретировать(Аргумент.Дочерний, Неопределено, Ложь));
        //        }
        //        else if (Аргумент.Свойство("Значение", out Значение))
        //        { // тип значения аргумента - строка
        //            Аргументы.Вставить(Аргумент.Имя, Значение);
        //        }
        //        else
        //        {
        //            Аргументы.Вставить(Аргумент.Имя, Аргумент.Дочерний);
        //        }
        //        Аргумент = Аргумент.Соседний;
        //    }
        //    return Аргументы;
        //}


        //public void ДобавитьСобытие(Узел Узел, string Событие, object Значение = null)
        //{
        //    object зСвойство = null;
        //    Узел уСвойство = null;

        //    if (Событие == "ПриНажатии")
        //    {
        //        var АтрибутПриНажатии = НайтиАтрибут(Узел, "А", "ПриНажатии"); // нужно вычислить и передать значение
        //        if (!(АтрибутПриНажатии == Неопределено))
        //        {
        //            уСвойство = АтрибутПриНажатии.Дочерний;
        //        }
        //    }
        //    else if (Событие == "ПриИзменении")
        //    {
        //        var АтрибутЗначение = НайтиАтрибут(Узел, "А", "Значение"); // изменить значение свойства
        //        if (!(АтрибутЗначение == Неопределено))
        //        {
        //            зСвойство = АтрибутЗначение.Дочерний;
        //        }
        //        var АтрибутВыбрано = НайтиАтрибут(Узел, "А", "Выбрано"); // изменить значение свойства
        //        if (!(АтрибутВыбрано == Неопределено))
        //        {
        //            зСвойство = АтрибутВыбрано.Дочерний;
        //        }
        //        var АтрибутПриИзменении = НайтиАтрибут(Узел, "А", "ПриИзменении"); // нужно вычислить и передать значение
        //        if (!(АтрибутПриИзменении == Неопределено))
        //        {
        //            уСвойство = АтрибутПриИзменении.Дочерний;
        //        }
        //    }

        //    if (!(зСвойство == Неопределено))
        //    {
        //        var Свойства = ПолучитьСвойстваПоСсылке(зСвойство as Узел);
        //        foreach (Узел Свойство in Свойства)
        //        {
        //            НовоеЗначениеУзла(Свойство, ИмяЗначение("Строка", Значение as string), Служебный(Свойство), Неопределено, Ложь);
        //        }
        //    }

        //    if (!(уСвойство == Неопределено))
        //    {
        //        var Свойства = ПолучитьСвойстваПоСсылке(уСвойство);
        //        foreach (Узел Свойство in Свойства)
        //        {
        //            var уЗначение = уСвойство.Соседний;
        //            if (!(уЗначение == Неопределено))
        //            {
        //                Значение = Интерпретировать(уЗначение);
        //                //Значение = ЗначениеСвойства(сЗначение);
        //                НовоеЗначениеУзла(Свойство, Значение, Истина);
        //                return; // событие не создается
        //            }
        //        }
        //    }

        //    if (!(зСвойство == Неопределено))
        //    {
        //        return; // событие не создается
        //    }

        //    var стрСобытие = Структура.Новый("Имя, Значение, Параметры", "" + Процесс.ПолучитьИД(), Событие + Символы.Таб + Узел.Код, Значение);

        //    Узел УзелОбъект = null;
        //    while (!(Узел == Неопределено))
        //    {
        //        if (Узел.Имя == "О" || Узел.Имя == "Объект")
        //        {
        //            УзелОбъект = Узел;
        //            break;
        //        }
        //        Узел = Узел.Родитель;
        //    }
        //    if (!(УзелОбъект == Неопределено))
        //    {
        //        Узел Свойства = null;
        //        var свУзел = УзелОбъект.Дочерний;
        //        if (!(свУзел == Неопределено))
        //        {
        //            if (свУзел.Имя == "Свойства.")
        //            {
        //                Свойства = свУзел;
        //            }
        //        }
        //        if (!(Свойства == Неопределено))
        //        {
        //            if (Свойства.д.Свойство("События"))
        //            {
        //                НовоеЗначениеУзла(Свойства.д.Получить<Узел>("События"), стрСобытие, Истина, Истина);
        //            }
        //        }
        //    }
        //} // ДобавитьСобытие()


        //string ОбъектФорма(Узел Узел, Узел Свойства)
        //{
        //    var Вид = "<script>var p = {id: '" + Узел.Код + "', fid: '" + Свойства.д.с.Форма.Код + "'";
        //    var св = Свойства.д.с.Форма.Дочерний;
        //    while (!(св == Неопределено))
        //    {
        //        Вид = Вид + "," + св.Имя + ":" + св.Значение;
        //        св = св.Соседний;
        //    }
        //    return Вид + "}; var id='_" + Узел.Код + "'; updifrm(id,p);</script>";
        //} // ОбъектФорма()


        //public object СоздатьСвойства(Узел Узел, string шСвойства, object _Служебный = null, bool? вКонец = null)
        //{
        //    //var св = Неопределено;
        //    var зСлужебный = _Служебный;

        //    if (зСлужебный == Неопределено)
        //    {
        //        зСлужебный = Служебный(Узел);
        //    }
        //    var к = -(1);
        //    var св = Узел;
        //    var _стрСвойства = Стр.Заменить(шСвойства, Символы.ВК, "");
        //    var стрСвойства = Стр.Разделить(_стрСвойства, Символы.ПС);
        //    bool Служ = false;
        //    foreach (string стр in стрСвойства)
        //    { // парсер
        //        if (!(стр == ""))
        //        {
        //            var _стр = Сред(стр, Найти(стр, "|") + 1); // найти начало строки
        //            var м = Стр.Разделить(_стр, Символы.Таб);
        //            var т = 0;
        //            var Имя = "";
        //            var Зн = "";
        //            var п = 0;
        //            while (п < м.Length)
        //            {
        //                if (м[п] == "")
        //                {
        //                    т = т + 1;
        //                }
        //                else if (Имя == "")
        //                {
        //                    if (т == 0)
        //                    {
        //                        Служ = (зСлужебный as bool? == Истина);
        //                    }
        //                    var _имзн = Стр.Заменить(м[п], ": ", Символы.Таб);
        //                    var имзн = Стр.Разделить(_имзн, Символы.Таб);
        //                    Имя = имзн[0];
        //                    if (Лев(Имя, 1) == "*")
        //                    {
        //                        Служ = Истина;
        //                        Имя = Сред(Имя, 2);
        //                    }
        //                    if (имзн.Length > 1)
        //                    {
        //                        Зн = имзн[1];
        //                    }
        //                }
        //                else
        //                { // атрибуты
        //                    break;
        //                }
        //                п = п + 1;
        //            }
        //            if (Имя == "" && Зн == "")
        //            {
        //                continue;
        //            }
        //            if (зСлужебный as string == "Только")
        //            { // только служебные
        //                if (!((bool)Служ == Истина))
        //                {
        //                    continue;
        //                }
        //                if (т == 0)
        //                {
        //                    if (Узел.д.Свойство(Стр.Заменить(Имя, ".", "")))
        //                    { // такое свойство уже существует
        //                        continue;
        //                    }
        //                }
        //            }
        //            if (т > к)
        //            {
        //                св = НовыйДочерний(св, ИмяЗначение(Имя, "" + Зн), Служ, !(вКонец == Ложь) && Служ == Истина);
        //                к = т;
        //            }
        //            else
        //            {
        //                while (т < к)
        //                {
        //                    св = св.Родитель;
        //                    к = к - 1;
        //                }
        //                св = НовыйСоседний(св, ИмяЗначение(Имя, "" + Зн), Служ);
        //            }
        //            // атрибуты
        //            var ат = св;
        //            while (п < м.Length)
        //            {
        //                var имзн = Стр.Разделить(м[п], "=");
        //                Имя = имзн[0];
        //                if (имзн.Length > 1)
        //                {
        //                    Зн = имзн[1];
        //                }
        //                else
        //                {
        //                    Зн = "";
        //                }
        //                var д = "";
        //                var н = Стр.Найти(Зн, "|");
        //                if (н != 0)
        //                { // дочернее значение атрибута
        //                    д = Сред(Зн, н + 1);
        //                    Зн = Лев(Зн, н - 1);
        //                }
        //                if (ат == св)
        //                {
        //                    ат = НовыйАтрибут(ат, ИмяЗначение(Имя, "" + Зн), Служ);
        //                }
        //                else
        //                {
        //                    ат = НовыйСоседний(ат, ИмяЗначение(Имя, "" + Зн), Служ);
        //                }
        //                if (!(д == ""))
        //                { // добавить дочерний узел в атрибут
        //                    var _имзн = Стр.Заменить(д, ": ", Символы.Таб);
        //                    имзн = Стр.Разделить(_имзн, Символы.Таб);
        //                    Имя = имзн[0];
        //                    if (имзн.Length > 1)
        //                    {
        //                        Зн = имзн[1];
        //                    }
        //                    НовыйДочерний(ат, ИмяЗначение(Имя, "" + Зн), Служ, Служ == Истина);
        //                }
        //                п = п + 1;
        //            }
        //        }
        //    }

        //    ПостроитьСтруктуру(Узел);

        //    // добавить аргументы в свойства
        //    var Аргумент = Узел.Родитель.Атрибут;
        //    while (!(Аргумент == Неопределено))
        //    {
        //        Узел.д.Вставить(Аргумент.Имя, Аргумент);
        //        Аргумент = Аргумент.Соседний;
        //    }

        //    return Узел;
        //} // СоздатьСвойства()


        //object ДобавитьСвойство(Узел УзелСвойства, Узел стрСвойства, bool Служебный = false)
        //{
        //    var элСвойство = НовыйДочерний(УзелСвойства, стрСвойства, Служебный, Истина);
        //    УзелСвойства.д.Вставить(элСвойство.Имя, элСвойство);
        //    return элСвойство;
        //} // ДобавитьСвойство()


        //void ОбновитьСвязи(Узел Узел)
        //{
        //    //Сообщить("ОбновитьСвязи " + Узел.Код);
        //    var Связи = ВсеСвязи.Получить(Узел);
        //    if (!(Связи == Неопределено))
        //    {
        //        foreach (КлючИЗначение элУзел in Связи as Соответствие)
        //        {
        //            //Сообщить("+Изменения " + элУзел.Ключ.Код);
        //            var оУзел = элУзел.Значение as Узел;
        //            var Изменения = УзелСвойство(оУзел, "Изменения") as Соответствие;
        //            Изменения.Вставить(элУзел.Ключ, Истина);
        //            //Сообщить("+ОбъектыОбновить " + элУзел.Значение.Код);
        //            ОбъектыОбновитьДобавить(оУзел);
        //        }
        //    }
        //}


        //object ПостроитьСтруктуру(Узел Узел)
        //{
        //    var УзелИмя = Узел.Имя;
        //    if (!(УзелИмя == ""))
        //    {
        //        if (Прав(УзелИмя, 1) == ".")
        //        {
        //            Узел.Вставить("д", Структура.Новый());
        //            УзелИмя = Лев(УзелИмя, Стр.Длина(УзелИмя) - 1);
        //            var дУзел = Узел.Дочерний;
        //            while (!(дУзел == Неопределено))
        //            {
        //                Узел.д.Вставить(ПостроитьСтруктуру(дУзел) as string, дУзел);
        //                дУзел = дУзел.Соседний;
        //            }
        //        }
        //    }
        //    return УзелИмя;
        //}


        //public object ОбработатьОбъект(Узел Узел, bool Инициализация = false)
        //{

        //    if (Узел.Значение as string == "")
        //    {
        //        return "";
        //    }

        //    string ИмяФункции;
        //    var Библиотека = УзелСвойство(Узел, "Библиотека");
        //    if (Библиотека == Неопределено)
        //    {
        //        var ИмяОбъекта = "";
        //        var ТипОбъекта = Узел.Значение as string;
        //        var ИмяБиблиотеки = "Объекты";

        //        var пТипИмя = Найти(ТипОбъекта, " ");
        //        if (пТипИмя > 0)
        //        {
        //            ИмяОбъекта = Сред(ТипОбъекта, пТипИмя + 1);
        //            ТипОбъекта = Лев(ТипОбъекта, пТипИмя - 1);
        //        }
        //        if (Стр.Найти(ТипОбъекта, ".") != 0)
        //        {
        //            var _ТипОбъекта = Стр.Разделить(ТипОбъекта, ".");
        //            ИмяБиблиотеки = _ТипОбъекта[0] as string;
        //            ТипОбъекта = _ТипОбъекта[1] as string;
        //        }

        //        Узел.Вставить("ИмяОбъекта", ИмяОбъекта);
        //        Узел.Вставить("ТипОбъекта", ТипОбъекта);

        //        var Версия = "" + Версии.Получить(ИмяБиблиотеки);
        //        Библиотека = Процесс.ПолучитьБиблиотеку(ИмяБиблиотеки, Версия);
        //        Узел.Вставить("Библиотека", Библиотека);
        //    }

        //    //Сообщить(ИмяДанных + " " + Узел.Код + " " + Узел.ТипОбъекта + " " + Узел.ИмяОбъекта);

        //    Узел Свойства = УзелСвойство(Узел, "Свойства") as Узел;
        //    if (Свойства == Неопределено)
        //    {
        //        Свойства = Узел.Дочерний;
        //        if (!(Свойства == Неопределено))
        //        {
        //            if (Свойства.Имя == "Свойства.")
        //            {
        //                ПостроитьСтруктуру(Свойства);
        //            }
        //            else
        //            { // новый объект
        //                Свойства = null;
        //            }
        //            Узел.Вставить("Свойства", Свойства);
        //        }
        //    }

        //    var Изменения = УзелСвойство(Узел, "Изменения") as Соответствие;
        //    if (Изменения == Неопределено)
        //    { // инициализация

        //        var Результат = Неопределено;
        //        Изменения = Соответствие.Новый();
        //        Узел.Вставить("Изменения", Изменения);
        //        Изменения.Вставить(Узел, Истина);

        //        ИмяФункции = Узел.ТипОбъекта + "_Свойства";

        //        if (Рефлектор.МетодСуществует(Библиотека, ИмяФункции))
        //        {
        //            var Параметры = Массив.Новый();
        //            Параметры.Добавить(ЭтотОбъект);
        //            Параметры.Добавить(Узел);
        //            Результат = Рефлектор.ВызватьМетод(Библиотека, ИмяФункции, Параметры);
        //            if (Результат == Неопределено)
        //            { // обработать модель сразу
        //                Свойства = Узел.Получить("Свойства") as Узел;
        //            }
        //            else if (Результат is bool)
        //            { // модель обработать позже
        //                if ((bool)Результат == Ложь)
        //                { // запустить инициализацию повторно
        //                    Узел.Вставить("Изменения", Неопределено);
        //                }
        //                return Неопределено;
        //            }
        //            else
        //            { // свойства по шаблону
        //                if (!(Свойства == Неопределено))
        //                {
        //                    СоздатьСвойства(Свойства, (string)Результат, "Только");
        //                }
        //            }

        //        }

        //        if (Свойства == Неопределено)
        //        { // новый объект
        //            Свойства = НовыйДочерний(Узел, ИмяЗначение("Свойства.", ""), Служебный(Узел));
        //            if (!(Результат == Неопределено))
        //            {
        //                СоздатьСвойства(Свойства, (string)Результат); // свойства по шаблону
        //            }
        //            Узел.Вставить("Свойства", Свойства);
        //        }

        //        if (Узел == Корень)
        //        {
        //            Узел уВерсии = УзелСвойство(Свойства.д, "Версии") as Узел;
        //            if (!(уВерсии == Неопределено))
        //            {
        //                foreach (КлючИЗначение эл in уВерсии.д)
        //                {
        //                    Версии.Вставить(эл.Ключ, ((Узел)эл.Значение).Значение);
        //                }
        //            }
        //        }

        //    }

        //    if (Инициализация)
        //    {
        //        return Свойства;
        //    }

        //    Узел.Вставить("Изменения", Соответствие.Новый());


        //    //Если Изменения.Количество() Тогда
        //    ИмяФункции = Узел.ТипОбъекта + "_Модель";
        //    if (Рефлектор.МетодСуществует(Библиотека, ИмяФункции))
        //    {
        //        Сообщить("м. " + Узел.Код);
        //        var Параметры = Массив.Новый();
        //        Параметры.Добавить(ЭтотОбъект);
        //        Параметры.Добавить(Свойства);
        //        Параметры.Добавить(Изменения);
        //        var Обновить = (Рефлектор.ВызватьМетод(Библиотека, ИмяФункции, Параметры) as bool? == true);
        //        foreach (КлючИЗначение св in Изменения)
        //        {
        //            ОбновитьСвязи(св.Ключ as Узел);
        //        }
        //        if (Обновить == Истина)
        //        { // запустить повторно
        //            ОбъектыОбновить.Добавить(Узел);
        //        }
        //    }
        //    //КонецЕсли;
            
        //    var рУзел = Узел.Родитель;
        //    while (!(рУзел == Неопределено))
        //    {
        //        if (рУзел.Свойство("Свойства"))
        //        {
        //            рУзел.Вставить("Содержимое", Неопределено);
        //            рУзел.Вставить("Состояние", Неопределено);
        //        }
        //        рУзел = рУзел.Родитель;
        //    }

        //    if (ПолучитьУзел(Узел.Код) == Неопределено)
        //    { // Узел был удален
        //        return Неопределено;
        //    }

        //    // сформировать представление объекта
        //    string Состояние = "";
        //    if (Свойства.д.Свойство("Вид"))
        //    { // Стандартный вид
        //        var Вид = ЗначениеСвойства(Свойства.д["Вид"] as Структура);
        //        Состояние = "<obj id='_" + Узел.Код + "'>" + Вид + ЗначениеСвойства(Свойства.д, "Описание") + "</obj>";
        //    }
        //    else
        //    {
        //        var Содержимое = УзелСвойство(Узел, "Содержимое");
        //        if (Содержимое == Неопределено)
        //        {
        //            // обработать вложенные объекты
        //            if (!(Свойства.Соседний == Неопределено) || Свойства.Свойство("_Соседний"))
        //            {
        //                Содержимое = Интерпретировать(Узел.Свойства, Неопределено, Ложь);
        //                Узел.Вставить("Содержимое", Содержимое);
        //            }
        //        }

        //        Состояние = "<obj id='_" + Узел.Код + "'>" + ЗначениеСвойства(Свойства.д, "Описание") + Содержимое + "</obj>";
        //    }

        //    if (Свойства.д.Свойство("Форма"))
        //    {
        //        Состояние = Состояние + ОбъектФорма(Узел, Свойства);
        //    }

        //    Узел.Вставить("Состояние", Состояние);

        //    return Состояние;

        //} // ОбработатьОбъект()


        //object ВызватьФункцию(Узел Узел)
        //{
        //    var Состояние = Неопределено;

        //    if (!(УзелСвойство(Узел, "Обновить") as bool? == Ложь))
        //    {

        //        var ИмяФункции = УзелСвойство(Узел, "Значение") as string;
        //        if (!("" + ИмяФункции == ""))
        //        {
        //            var ИмяБиблиотеки = "Функции";

        //            if (Стр.Найти(ИмяФункции, ".") != 0)
        //            {
        //                var мИмяФункции = Стр.Разделить(ИмяФункции, ".");
        //                ИмяБиблиотеки = мИмяФункции[0] as string;
        //                ИмяФункции = мИмяФункции[1] as string;
        //            }

        //            var Библиотека = Процесс.ПолучитьБиблиотеку(ИмяБиблиотеки);
        //            if (Рефлектор.МетодСуществует(Библиотека, ИмяФункции))
        //            {
        //                var Параметры = Массив.Новый();
        //                Параметры.Добавить(ЭтотОбъект);
        //                var Аргументы = ПолучитьАргументы(Узел);
        //                Параметры.Добавить(Аргументы);
        //                Состояние = Рефлектор.ВызватьМетод(Библиотека, ИмяФункции, Параметры);
        //            }
        //            else
        //            {
        //                ВызватьИсключение("Функция " + ИмяФункции + " не найдена");
        //            }
        //        }

        //        Узел.Вставить("Обновить", Ложь);
        //    }

        //    return Состояние;

        //} // ВызватьФункцию()


        //public object Интерпретировать(Узел Узел, object _ЭтоАтрибут = null, bool НачальныйУзел = true)
        //{
        //    //Перем Имя, Значение, 
        //    var Результат = Неопределено;

        //    bool ЭтоАтрибут = _ЭтоАтрибут is null ? false : (bool)_ЭтоАтрибут;

        //    if (!(Узел is Узел))
        //    {
        //        ВызватьИсключение("Неверный узел: " + Узел);
        //        //Сообщить("Это не узел");
        //        return "";
        //    }

        //    var СледУзел = Узел;
        //    while (!(СледУзел == Неопределено))
        //    {
        //        Узел = СледУзел;

        //        var Состояние = Неопределено;

        //        var Имя = Узел.Имя;
        //        var Значение = "" + УзелСвойство(Узел, "Значение");

        //        //Сообщить("у " + Узел.Код + " " + Имя + " " + Значение);

        //        if (Имя == "Истина")
        //        {
        //            Состояние = Истина;
        //        }
        //        else if (Имя == "Ложь")
        //        {
        //            Состояние = Ложь;
        //        }
        //        else if (Имя == "Неопределено")
        //        {
        //            Состояние = Неопределено;
        //        }
        //        else if (Имя == "Пустой")
        //        {
        //            Состояние = Пустой;
        //        }
        //        else if (Имя == "Число")
        //        {
        //            if (!("" + Значение == ""))
        //            {
        //                Состояние = Число(Значение);
        //            }
        //            else
        //            {
        //                if (!(Узел.Дочерний == Неопределено))
        //                {
        //                    Состояние = Число(Интерпретировать(Узел.Дочерний, Неопределено, Ложь));
        //                }
        //            }
        //        }
        //        else if (Имя == "Пробел")
        //        {
        //            Состояние = " ";
        //        }
        //        else if (Имя == "Источник")
        //        {
        //            Состояние = Процесс.ПолучитьСубъект();
        //        }
        //        else if (Имя == "Процесс")
        //        {
        //            Состояние = Процесс.get_procid();
        //        }
        //        else if (Имя == "Строка" && !(ЭтоАтрибут))
        //        {
        //            Состояние = "" + Значение;
        //            if (!(Узел.Дочерний == Неопределено))
        //            {
        //                Состояние = Состояние as string + Интерпретировать(Узел.Дочерний, Неопределено, Ложь);
        //            }
        //        }
        //        else if (Имя == "Структура")
        //        {
        //            Состояние = Значение;
        //        }
        //        else if ((Имя == "Аргумент" || Имя == "А") && ЭтоАтрибут)
        //        {
        //            // объявление аргумента
        //            if (Значение == "Значение")
        //            { // текстовое поле
        //                if (!(Узел.Дочерний == Неопределено))
        //                {
        //                    Состояние = @" value=""" + Интерпретировать(Узел.Дочерний) + @""" onchange=""addcmd(this,event)""";
        //                }
        //            }
        //            else if (Значение == "Выбрано")
        //            { // галочка
        //                if (!(Узел.Дочерний == Неопределено))
        //                {
        //                    Состояние = (Интерпретировать(Узел.Дочерний) as string == "true") ? @" checked=""checked""" : "";
        //                }
        //            }
        //            else if (Значение == "ПриИзменении")
        //            {
        //                Состояние = @" onchange=""addcmd(this,event)""";
        //            }
        //            else if (Значение == "ПриНажатии")
        //            {
        //                Состояние = @" onclick=""addcmd(this,event); return false""";
        //            }
        //            else if (Значение == "ПриОтправке")
        //            {
        //                Состояние = @" onsubmit=""addcmd(this,event); return false""";
        //            }

        //        }
        //        else if (Имя == "Функция" || Имя == "Ф")
        //        {
        //            if (Узел.Дочерний == Неопределено)
        //            {
        //                Состояние = "" + ВызватьФункцию(Узел);
        //            }
        //            if (!(Узел.Дочерний == Неопределено))
        //            {
        //                Состояние = Состояние as string + Интерпретировать(Узел.Дочерний, Неопределено, Ложь);
        //            }

        //        }
        //        else if (Имя == "Свойства.")
        //        { // свойства объекта
        //            if (Узел.Свойство("_Соседний", out var _Соседний))
        //            { // прочитать вложение объекта
        //                Узел.Соседний = ПолучитьУзел(_Соседний, Узел);
        //                Узел.Удалить("_Соседний");
        //            }

        //        }
        //        else if (Имя == "Объект" || Имя == "О")
        //        { // это объект
        //          // оптимизация
        //            Состояние = УзелСвойство(Узел, "Состояние");
        //            if (Состояние == Неопределено)
        //            {
        //                if (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла < 50) // сразу обработать
        //                    Состояние = ОбработатьОбъект(Узел);
        //                else
        //                {
        //                    ОбъектыОбновитьДобавить(Узел);
        //                    Состояние = "<obj id='_" + Узел.Код + "'></obj>";
        //                }
        //            }

        //        }
        //        else if (Имя == "")
        //        { // это оператор
        //            var Параметры = Массив.Новый();
        //            Параметры.Добавить(ЭтотОбъект);
        //            Параметры.Добавить(Узел.Дочерний);

        //            var ИмяФункции = Значение as string;
        //            if (!("" + Значение == ""))
        //            {
        //                var ИмяБиблиотеки = "Операторы";

        //                if (Стр.Найти(Значение as string, ".") != 0)
        //                {
        //                    var мИмяФункции = Стр.Разделить(ИмяФункции, ".");
        //                    ИмяБиблиотеки = мИмяФункции[0];
        //                    ИмяФункции = мИмяФункции[1];
        //                }

        //                var Библиотека = УзелСвойство(Узел, "Библиотека");
        //                if (Библиотека == Неопределено)
        //                {
        //                    var Версия = "" + Версии.Получить(ИмяБиблиотеки);
        //                    Библиотека = Процесс.ПолучитьБиблиотеку(ИмяБиблиотеки, Версия);
        //                    Узел.Вставить("Библиотека", Библиотека);
        //                }
        //                Состояние = Рефлектор.ВызватьМетод(Библиотека, "Оператор_" + ВРег(ИмяФункции), Параметры);
        //            }

        //        }
        //        else if (Имя == "Ссылка" || Имя == "С")
        //        {
        //            var Свойства = ПолучитьСвойстваПоСсылке(Узел, Неопределено, Истина);
        //            if (Свойства.Количество() == 0)
        //            {
        //                ВызватьИсключение ("Свойство не найдено: " + Узел.Значение);
        //            }
        //            Состояние = Свойства[0];

        //        }
        //        else if (Имя == "Переменная" || Имя == "П")
        //        { // значение переменной объекта
        //            var сУзел = Узел;
        //            while (!(сУзел == Неопределено))
        //            {
        //                if (сУзел.Имя == "Свойства.")
        //                {
        //                    Состояние = УзелСвойство(сУзел.Родитель, Значение as string);
        //                    if (Значение == "Содержимое" && Состояние == Неопределено)
        //                    {
        //                        Состояние = Интерпретировать(сУзел, Неопределено, Ложь);
        //                        сУзел.Родитель.Вставить("Содержимое", Состояние);
        //                    }
        //                    break;
        //                }
        //                сУзел = сУзел.Родитель;
        //            }

        //        }
        //        else if (Имя == "Значение" || Имя == "З")
        //        { // значение свойств объектов
        //            Состояние = "";
        //            var сУзел = Узел;
        //            var Свойства = ПолучитьСвойстваПоСсылке(Узел, Значение, Истина);
        //            if (Свойства.Количество() == 0)
        //            {
        //                Сообщить("Свойство не найдено: " + Значение + " узел " + Узел.Код);
        //            }
        //            foreach (Структура Свойство in Свойства)
        //            {
        //                if (Состояние as string == "")
        //                {
        //                    Состояние = ЗначениеСвойства(Свойство);
        //                }
        //                else
        //                {
        //                    Состояние = "" + Состояние + " " + ЗначениеСвойства(Свойство);
        //                }
        //            }

        //        }
        //        else if (Имя == "Свойство")
        //        {
        //            var Элемент = Интерпретировать(Узел.Дочерний) as Структура;
        //            Состояние = УзелСвойство(Элемент, Значение as string);
        //        }
        //        else if (Имя == "Атрибут")
        //        {
        //            Узел Элемент = Интерпретировать(Узел.Дочерний) as Узел;
        //            Состояние = НайтиСоседний(Элемент.Атрибут, Значение as string).Значение;
        //        }
        //        else if (Имя == "Первый")
        //        {
        //            Узел Список = Интерпретировать(Узел.Дочерний) as Узел;
        //            var Элемент = Список.Дочерний;
        //            if (Элемент == Неопределено)
        //            {
        //                Элемент = Пустой;
        //            }
        //            Состояние = Элемент;
        //        }
        //        else if (Имя == "Соседний")
        //        {
        //            Узел Элемент = Интерпретировать(Узел.Дочерний) as Узел;
        //            if (!(Элемент == Неопределено))
        //            {
        //                Элемент = Элемент.Соседний;
        //            }
        //            if (Элемент == Неопределено)
        //            {
        //                Элемент = Пустой;
        //            }
        //            Состояние = Элемент;
        //        }
        //        else
        //        {

        //            if (!(ЭтоАтрибут))
        //            {
        //                var ЗначениеУзелДочерний = "";
        //                if (!(Узел.Дочерний == Неопределено))
        //                {
        //                    ЗначениеУзелДочерний = Интерпретировать(Узел.Дочерний, Неопределено, Ложь) as string;
        //                }
        //                var ЗначениеУзелАтрибут = "";
        //                if (!(Узел.Атрибут == Неопределено))
        //                {
        //                    ЗначениеУзелАтрибут = Интерпретировать(Узел.Атрибут, Истина, Ложь) as string;
        //                }
        //                Состояние = ПоказатьУзел(Узел, ЗначениеУзелАтрибут, ЗначениеУзелДочерний);
        //            }
        //            else
        //            {
        //                var ЗначениеУзелДочерний = "";
        //                if (!(Узел.Дочерний == Неопределено))
        //                {
        //                    ЗначениеУзелДочерний = Интерпретировать(Узел.Дочерний, Неопределено, Ложь) as string;
        //                }
        //                Состояние = ПоказатьУзел(Узел, "", ЗначениеУзелДочерний, Истина);
        //            }

        //        }

        //        if (НачальныйУзел)
        //        {
        //            return Состояние;
        //        }

        //        //К = К + 1;
        //        if (Результат == Неопределено)
        //        {
        //            Результат = Состояние;
        //        }
        //        else
        //        {
        //            Результат = Результат as string + Состояние;
        //        }

        //        СледУзел = Узел.Соседний;

        //    }

        //    return Результат;

        //} // Интерпретировать()


        //public Структура НайтиПоКоду(string Код, Узел Старший)
        //{
        //    var Найден = Неопределено;
        //    Узел Дочерний = null;
        //    Узел Соседний = null;

        //    var Атрибут = ПолучитьУзел(Старший.Атрибут, Старший);
        //    if (!(Атрибут == Неопределено))
        //    {
        //        if (Атрибут.Код == Код)
        //        {
        //            Найден = Атрибут;
        //        }
        //    }
        //    if (Найден == Неопределено)
        //    {
        //        Дочерний = ПолучитьУзел(Старший.Дочерний, Старший);
        //        if (!(Дочерний == Неопределено))
        //        {
        //            if (Дочерний.Код == Код)
        //            {
        //                Найден = Дочерний;
        //            }
        //        }
        //    }
        //    if (Найден == Неопределено)
        //    {
        //        Соседний = ПолучитьУзел(Старший.Соседний, Старший);
        //        if (!(Соседний == Неопределено))
        //        {
        //            if (Соседний.Код == Код)
        //            {
        //                Найден = Соседний;
        //            }
        //        }
        //    }

        //    if (Найден == Неопределено)
        //    {
        //        if (!(Атрибут == Неопределено))
        //        {
        //            Найден = НайтиПоКоду(Код, Атрибут);
        //        }
        //    }
        //    if (Найден == Неопределено)
        //    {
        //        if (!(Дочерний == Неопределено))
        //        {
        //            Найден = НайтиПоКоду(Код, Дочерний);
        //        }
        //    }
        //    if (Найден == Неопределено)
        //    {
        //        if (!(Соседний == Неопределено))
        //        {
        //            Найден = НайтиПоКоду(Код, Соседний);
        //        }
        //    }

        //    return Найден as Структура;

        //}


        override public Узел ПолучитьУзел(object Код, Узел Старший = null)
        {
            if (Код is null) return null;

            var Узел = Узлы.Получить(Код) as Узел;
            if (!(Узел == Неопределено))
            {
                return Узел;
            }
            if (Код is Узел)
            {
                return (Узел)Код;
            }

            var мУзел = Данные.ПолучитьМассив((int)Число(Код));

            мУзел[3] = мУзел[3].ToString();
            if ((string)мУзел[3] == "0") мУзел[3] = null;
            мУзел[4] = мУзел[4].ToString();
            if ((string)мУзел[4] == "0") мУзел[4] = null;
            мУзел[5] = мУзел[5].ToString();
            if ((string)мУзел[5] == "0") мУзел[5] = null;

            Узел = Узел.Новый("Код, Имя, Значение, Атрибут, Дочерний, _Соседний",
                              Код.ToString(),
                              Данные.ПолучитьСтроку((int)мУзел[1]),
                              Данные.ПолучитьСтроку((int)мУзел[2]),
                              мУзел[3],
                              мУзел[4],
                              мУзел[5]
                             );

            if (!(Узел == Неопределено))
            {

                if (!(Старший == null))
                {
                    Узел.Вставить("Старший", Старший);
                    var Родитель = Старший;
                    var СтаршийСоседний = Старший.Получить("_Соседний") as string;
                    if (СтаршийСоседний == Узел.Код)
                    {
                        Родитель = Старший.Родитель;
                    }
                    Узел.Вставить("Родитель", Родитель);
                    if (УзелСвойство(Родитель, "Атрибут") as string == Узел.Код || (Старший.Свойство("ЭтоАтрибут") == Истина && СтаршийСоседний == Узел.Код))
                    {
                        Узел.Вставить("ЭтоАтрибут", Истина);
                    }
                }

                Узлы.Вставить(Код, Узел);

                var УзелДочерний = Узел.Получить("Дочерний");
                if (!(УзелДочерний == Неопределено))
                {
                    Узел.Дочерний = ПолучитьУзел(УзелДочерний, Узел);
                }
                var УзелСоседний = Узел.Получить("_Соседний");
                if (!(УзелСоседний == Неопределено) && !(Узел.Имя == "Свойства."))
                {
                    Узел.Соседний = ПолучитьУзел(УзелСоседний, Узел);
                    Узел.Удалить("_Соседний");
                }
                var УзелАтрибут = Узел.Получить("Атрибут");
                if (!(УзелАтрибут == Неопределено))
                {
                    Узел.Атрибут = ПолучитьУзел(УзелАтрибут, Узел);
                }

            }

            return Узел;
        } // ПолучитьУзел()


        //public Узел НовыйУзел(Узел Узел, bool Служебный = false)
        //{
        //    string НовыйКод;

        //    if (Служебный)
        //    {
        //        сКоличество = сКоличество + 1;
        //        НовыйКод = "s" + сКоличество.ToString();
        //    }
        //    else
        //    {
        //        Количество = Количество + 1;
        //        НовыйКод = Количество.ToString();
        //    }

        //    var УзелИмя = Узел.Имя;
        //    if (!(УзелИмя == ""))
        //    {
        //        if (Прав(УзелИмя, 1) == ".")
        //        {
        //            Узел.Вставить("д", Структура.Новый());
        //            УзелИмя = Лев(УзелИмя, Стр.Длина(УзелИмя) - 1);
        //        }
        //        var Родитель = УзелСвойство(Узел, "Родитель");
        //        if (!(Родитель == Неопределено))
        //        {
        //            if (Узел.Родитель.Свойство("д"))
        //            {
        //                Узел.Родитель.д.Вставить(УзелИмя, Узел);
        //            }
        //        }
        //    }

        //    if (!(Узел.Свойство("Дочерний")))
        //    {
        //        Узел.Вставить("Дочерний");
        //    }
        //    if (!(Узел.Свойство("Соседний")))
        //    {
        //        Узел.Вставить("Соседний");
        //    }
        //    if (!(Узел.Свойство("Атрибут")))
        //    {
        //        Узел.Вставить("Атрибут");
        //    }

        //    Узел.Вставить("Код", НовыйКод);
        //    Узлы.Вставить(Узел.Код, Узел);

        //    return Узел;
        //} // НовыйУзел(СтруктураУзла)


        //public Узел НовыйРодитель(Узел Дочерний, Узел СтруктураУзла, bool Служебный = false)
        //{
        //    СтруктураУзла.Вставить("Старший", Дочерний.Старший);
        //    СтруктураУзла.Вставить("Родитель", Дочерний.Родитель);
        //    СтруктураУзла.Вставить("Дочерний", Дочерний);
        //    var нУзел = НовыйУзел(СтруктураУзла, Служебный);
        //    var СтаршийУзел = Дочерний.Старший;
        //    if (СтаршийУзел.Дочерний == Дочерний)
        //    {
        //        СтаршийУзел.Дочерний = нУзел;
        //    }
        //    if (СтаршийУзел.Соседний == Дочерний)
        //    {
        //        СтаршийУзел.Соседний = нУзел;
        //    }
        //    var СоседнийУзел = Дочерний.Соседний;
        //    if (!(СоседнийУзел == Неопределено))
        //    {
        //        СоседнийУзел.Старший = нУзел;
        //        нУзел.Вставить("Соседний", СоседнийУзел);
        //    }
        //    Дочерний.Вставить("Соседний", Неопределено);
        //    Дочерний.Вставить("Старший", нУзел);
        //    Дочерний.Вставить("Родитель", нУзел);
        //    return нУзел;
        //} // НовыйРодитель()

        //public void УдалитьРодителя(Узел Дочерний)
        //{
        //    var РодительУзел = Дочерний.Родитель;
        //    var СтаршийУзел = РодительУзел.Старший;
        //    if (СтаршийУзел.Дочерний == РодительУзел)
        //    {
        //        СтаршийУзел.Дочерний = Дочерний;
        //    }
        //    if (СтаршийУзел.Соседний == РодительУзел)
        //    {
        //        СтаршийУзел.Соседний = Дочерний;
        //    }
        //    Дочерний.Вставить("Старший", РодительУзел.Старший);
        //    Дочерний.Вставить("Родитель", РодительУзел.Родитель);
        //    var СоседнийУзел = Дочерний;
        //    while (!(СоседнийУзел.Соседний == Неопределено))
        //    {
        //        СоседнийУзел = СоседнийУзел.Соседний;
        //    }
        //    var СоседнийУзелРодитель = РодительУзел.Соседний;
        //    if (!(СоседнийУзелРодитель == Неопределено))
        //    {
        //        СоседнийУзел.Вставить("Соседний", СоседнийУзелРодитель);
        //        СоседнийУзелРодитель.Старший = СоседнийУзел;
        //    }
        //    // Удалить узел
        //    УдалитьУзел(РодительУзел, Истина, Истина);
        //} // УдалитьРодителя()

        //public Структура НовоеЗначениеУзла(Узел Узел, object Значение = null, bool Служебный = false, object _Добавить = null, bool Обновить = true)
        //{
        //    bool Добавить = (_Добавить is null) ? false : (bool)_Добавить;

        //    var ДочернийУзел = Узел.Дочерний;
        //    if (!(ДочернийУзел == Неопределено))
        //    {
        //        if (!(Добавить))
        //        {
        //            // прежний дочерний нужно удалять
        //            УдалитьУзел(ДочернийУзел, Истина, Истина);
        //            ДочернийУзел = null;
        //        }
        //    }
        //    if (Значение == Неопределено)
        //    {
        //        return null;
        //    }
        //    if (!(Значение is Узел))
        //        if (!(Значение is Структура) || !((Структура)Значение).Свойство("Имя"))
        //        Значение = ИмяЗначение(ТипЗнч(Значение), Значение);
        //    var нУзел = НовыйДочерний(Узел, Узел.Новый((Структура)Значение), Служебный, !(ДочернийУзел == Неопределено));
        //    if (Обновить)
        //    {
        //        ОбновитьУзел(Узел);
        //    }
        //    return нУзел;
        //} // НовоеЗначениеУзла()

        //public Узел НовыйДочерний(Узел Старший, Узел СтруктураУзла, bool Служебный = false, bool ВКонец = false)
        //{
        //    Узел зНовыйУзел;

        //    if (ВКонец)
        //    {
        //        var сУзел = Старший.Дочерний;
        //        if (!(сУзел == Неопределено))
        //        {
        //            while (!(сУзел == Неопределено))
        //            {
        //                Старший = сУзел;
        //                сУзел = сУзел.Соседний;
        //            }
        //            return НовыйСоседний(Старший, СтруктураУзла, Служебный);
        //        }
        //    }
        //    СтруктураУзла.Вставить("Старший", Старший);
        //    СтруктураУзла.Вставить("Родитель", Старший);
        //    var УзелСоседний = Старший.Дочерний;
        //    if (!(УзелСоседний == Неопределено))
        //    {
        //        СтруктураУзла.Вставить("Соседний", УзелСоседний);
        //    }
        //    if (СтруктураУзла.Свойство("Код"))
        //    { // существующий узел
        //        зНовыйУзел = СтруктураУзла;
        //    }
        //    else
        //    {
        //        зНовыйУзел = НовыйУзел(СтруктураУзла, Служебный);
        //    }
        //    Старший.Вставить("Дочерний", зНовыйУзел);
        //    if (!(УзелСоседний == Неопределено))
        //    {
        //        УзелСоседний.Вставить("Старший", зНовыйУзел);
        //    }
        //    // Если УзелСостояние(Старший, "ЭтоАтрибут") = Истина Тогда
        //    // 	УзелСостояниеЗначение(НовыйУзел, "ЭтоАтрибут", Истина);
        //    // КонецЕсли;
        //    return зНовыйУзел;
        //} // НовыйДочерний()

        //public Узел НовыйСоседний(Узел Старший, Узел СтруктураУзла, bool Служебный = false)
        //{
        //    СтруктураУзла.Вставить("Старший", Старший);
        //    СтруктураУзла.Вставить("Родитель", Старший.Родитель);
        //    var УзелСоседний = Старший.Соседний;
        //    if (!(УзелСоседний == Неопределено))
        //    {
        //        СтруктураУзла.Вставить("Соседний", УзелСоседний);
        //    }
        //    var нУзел = НовыйУзел(СтруктураУзла, Служебный);
        //    Старший.Вставить("Соседний", нУзел);
        //    if (!(УзелСоседний == Неопределено))
        //    {
        //        УзелСоседний.Вставить("Старший", нУзел);
        //    }
        //    if (Старший.Свойство("ЭтоАтрибут") == Истина)
        //    {
        //        нУзел.Вставить("ЭтоАтрибут", Истина);
        //    }
        //    return нУзел;
        //} // НовыйСоседний()

        //Структура НовыйПоследний(Узел Старший, Узел СтруктураУзла, bool Служебный = false)
        //{
        //    var УзелСоседний = Старший.Соседний;
        //    while (!(УзелСоседний == Неопределено))
        //    {
        //        Старший = УзелСоседний;
        //        УзелСоседний = Старший.Соседний;
        //    }
        //    СтруктураУзла.Вставить("Старший", Старший);
        //    СтруктураУзла.Вставить("Родитель", Старший.Родитель);
        //    var нУзел = НовыйУзел(СтруктураУзла, Служебный);
        //    Старший.Вставить("Соседний", нУзел);
        //    if (Старший.Свойство("ЭтоАтрибут") == Истина)
        //    {
        //        нУзел.Вставить("ЭтоАтрибут", Истина);
        //    }
        //    return нУзел;
        //} // НовыйПоследний()

        //public Узел НовыйАтрибут(Узел Старший, Узел СтруктураУзла, bool Служебный = false)
        //{
        //    СтруктураУзла.Вставить("Старший", Старший);
        //    СтруктураУзла.Вставить("Родитель", Старший);
        //    var УзелСоседний = Старший.Атрибут;
        //    if (!(УзелСоседний == Неопределено))
        //    {
        //        СтруктураУзла.Вставить("Соседний", УзелСоседний);
        //    }
        //    var нУзел = НовыйУзел(СтруктураУзла, Служебный);
        //    Старший.Вставить("Атрибут", нУзел);
        //    if (!(УзелСоседний == Неопределено))
        //    {
        //        УзелСоседний.Вставить("Старший", нУзел);
        //    }
        //    нУзел.Вставить("ЭтоАтрибут", Истина);
        //    return нУзел;
        //} // НовыйАтрибут()

        //public bool Служебный(Узел Узел)
        //{
        //    if (!(Узел == Неопределено))
        //    {
        //        if (Лев(Узел.Код, 1) == "s")
        //        {
        //            return Истина;
        //        }
        //    }
        //    return Ложь;
        //} // Служебный()

        //public void УдалитьУзел(Узел Узел, bool Совсем = true, bool Цепочку = false, bool НачальныйУзел = true)
        //{

        //    var УзелСоседний = Узел.Соседний;

        //    if (НачальныйУзел || Цепочку)
        //    {
        //        if (Узел.Родитель.Свойство("д"))
        //        { // удалить из индекса
        //            var УзелИмя = Узел.Имя;
        //            if (!(УзелИмя == ""))
        //            {
        //                if (Прав(УзелИмя, 1) == ".")
        //                {
        //                    УзелИмя = Лев(УзелИмя, Стр.Длина(УзелИмя) - 1);
        //                }
        //                Узел.Родитель.д.Удалить(УзелИмя);
        //            }
        //        }
        //        var УзелСтарший = Узел.Старший;
        //        if (УзелСтарший.Атрибут == Узел)
        //        {
        //            if (УзелСоседний == Неопределено || Цепочку)
        //            {
        //                //УзелСтарший.Удалить("Атрибут");
        //                УзелСтарший.Атрибут = null;
        //            }
        //            else
        //            {
        //                УзелСтарший.Атрибут = УзелСоседний;
        //                УзелСоседний.Старший = УзелСтарший;
        //            }
        //        }
        //        if (УзелСтарший.Дочерний == Узел)
        //        {
        //            if (УзелСоседний == Неопределено || Цепочку)
        //            {
        //                //УзелСтарший.Удалить("Дочерний");
        //                УзелСтарший.Дочерний = null;
        //            }
        //            else
        //            {
        //                УзелСтарший.Дочерний = УзелСоседний;
        //                УзелСоседний.Старший = УзелСтарший;
        //            }
        //        }
        //        if (УзелСтарший.Соседний == Узел)
        //        {
        //            if (УзелСоседний == Неопределено || Цепочку)
        //            {
        //                //УзелСтарший.Удалить("Соседний");
        //                УзелСтарший.Соседний = null;
        //            }
        //            else
        //            {
        //                УзелСтарший.Соседний = УзелСоседний;
        //                УзелСоседний.Старший = УзелСтарший;
        //            }
        //        }
        //    }

        //    // удалить связи
        //    foreach (КлючИЗначение элСвязь in ВсеСвязи)
        //    {
        //        var Связи = элСвязь.Значение as Соответствие;
        //        var уСвязи = Соответствие.Новый();
        //        уСвязи.Вставить(Узел);
        //        foreach (КлючИЗначение элУзел in Связи)
        //        {
        //            if (элУзел.Значение == Узел)
        //            {
        //                уСвязи.Вставить(элУзел.Ключ);
        //            }
        //        }
        //        foreach (КлючИЗначение элУзел in уСвязи)
        //        {
        //            Связи.Удалить(элУзел.Ключ);
        //        }
        //    }
        //    ВсеСвязи.Удалить(Узел);

        //    Узлы.Удалить(Узел.Код);
        //    //Сообщить("Узел удален " + Узел.Код);
        //    var ЭтоСлужебный = Служебный(Узел);
        //    if (!(ЭтоСлужебный))
        //    {
        //        //Данные.ЗаменитьСтроку((int)Число(Узел.Код), "");
        //    }

        //    if (Совсем || ЭтоСлужебный)
        //    {
        //        if (!(Узел.Атрибут == Неопределено))
        //        {
        //            УдалитьУзел(Узел.Атрибут, Истина, Истина, Ложь);
        //        }
        //        if (!(Узел.Дочерний == Неопределено))
        //        {
        //            УдалитьУзел(Узел.Дочерний, Истина, Истина, Ложь);
        //        }
        //        if (Узел.Имя == "Свойства.")
        //        {
        //            Узел.Родитель.Удалить("Свойства");
        //            Узел.Родитель.Удалить("Изменения");
        //            Узел.Родитель.Удалить("Состояние");
        //            Узел.Родитель.Удалить("Библиотека");
        //            Узел.Родитель.Удалить("Обновить");
        //        }
        //        ОсвободитьОбъект(Узел);
        //    }

        //    if (Цепочку)
        //    {
        //        if (!(УзелСоседний == Неопределено))
        //        {
        //            УдалитьУзел(УзелСоседний, Совсем, Истина, Ложь);
        //        }
        //    }

        //} // УдалитьУзел(Узел)

        //public void КопироватьУзел(Узел Узел, Соответствие Буфер, bool ПервыйВызов = true)
        //{

        //    Буфер.Вставить(Узел.Код, Узел);

        //    if (!(Узел.Атрибут == Неопределено))
        //    {
        //        КопироватьУзел(Узел.Атрибут, Буфер, Ложь);
        //    }

        //    if (!(Узел.Дочерний == Неопределено))
        //    {
        //        КопироватьУзел(Узел.Дочерний, Буфер, Ложь);
        //    }

        //    if (!(ПервыйВызов))
        //    {
        //        if (!(Узел.Соседний == Неопределено))
        //        {
        //            КопироватьУзел(Узел.Соседний, Буфер, Ложь);
        //        }
        //    }

        //} // КопироватьУзел()

        //Узел НайтиСоседний(Узел Узел, string ИмяУзла)
        //{
        //    while (!(Узел == Неопределено))
        //    {
        //        if (Узел.Имя == ИмяУзла)
        //        {
        //            return Узел;
        //        }
        //        Узел = Узел.Соседний;
        //    }
        //    return null;
        //} // НайтиСоседний()

        //public Узел НайтиАтрибут(Узел Узел, string ИмяАтрибута, object ЗначениеАтрибута = null)
        //{
        //    Узел = Узел.Атрибут;
        //    while (!(Узел == Неопределено))
        //    {
        //        if (Узел.Имя == ИмяАтрибута)
        //        {
        //            if (ЗначениеАтрибута == Неопределено)
        //            {
        //                return Узел;
        //            }
        //            else if (ЗначениеАтрибута as string == УзелСвойство(Узел, "Значение") as string)
        //            {
        //                return Узел;
        //            }
        //        }
        //        Узел = Узел.Соседний;
        //    }
        //    return null;
        //} // НайтиАтрибут()

        int СохранитьУзел(Узел элУзел = null)
        {
            if (!(Служебный(элУзел)))
            {
                var а = 0;
                var д = 0;
                var с = 0;
                if (элУзел.Атрибут != Неопределено) а = СохранитьУзел(элУзел.Атрибут);
                if (элУзел.Дочерний != Неопределено) д = СохранитьУзел(элУзел.Дочерний);
                if (элУзел.Соседний != Неопределено) с = СохранитьУзел(элУзел.Соседний);
                var у = Новый.Массив();
                у.Добавить(2);
                у.Добавить(Данные.ДобавитьЗначение(МассивИзСтроки(элУзел.Имя)));
                у.Добавить(Данные.ДобавитьЗначение(МассивИзСтроки(элУзел.Значение.ToString())));
                у.Добавить(а);
                у.Добавить(д);
                у.Добавить(с);
                return Данные.ДобавитьЗначение(у);
            }
            return 0;
        }

        public string СохранитьДанные()
        {
            Данные.ОткрытьПотокДанных(Истина);
            СохранитьУзел(Корень);
            return "";
        } // СохранитьДанные()


        public Узел _ПолучитьУзел(ТекстовыйДокумент _Данные, object Код, Узел Старший = null)
        {
            if (Код is null) return null;

            var Узел = Узлы.Получить(Код) as Узел;
            if (!(Узел == Неопределено))
            {
                return Узел;
            }
            if (Код is Узел)
            {
                return (Узел)Код;
            }
            // Если Лев(Код, 1) = "s" Тогда
            //  Возврат Неопределено
            // КонецЕсли;
            //Стр = Данные.ПолучитьСтроку(Число(Код));
            string стр;

            try
            {
                стр = _Данные.ПолучитьСтроку((int)Число(Код));
            }
            catch
            {
                return null;
                //ВызватьИсключение "Неверный код узла: " + Код;
            }
            var мСтр = Стр.Разделить(стр, Символы.Таб);
            string Ключ = null;
            foreach (string _знСтр in мСтр)
            {
                var знСтр = _знСтр;
                if (Ключ == null)
                {
                    Ключ = знСтр;
                }
                else
                {
                    if (Узел == Неопределено)
                    {
                        Узел = Узел.Новый("Код, Имя, Значение, Дочерний, Соседний, Атрибут", Код, "");
                    }
                    if (Ключ == "И")
                    {
                        Ключ = "Имя";
                    }
                    else if (Ключ == "З")
                    {
                        Ключ = "Значение";
                        знСтр = Стр.Заменить(знСтр, "#x9", Символы.Таб);
                        знСтр = Стр.Заменить(знСтр, "#xA", Символы.ПС);
                        знСтр = Стр.Заменить(знСтр, "#xD", Символы.ВК);
                    }
                    else if (Ключ == "Д")
                    {
                        Ключ = "Дочерний";
                    }
                    else if (Ключ == "С")
                    {
                        Ключ = "_Соседний";
                    }
                    else if (Ключ == "А")
                    {
                        Ключ = "Атрибут";
                    }
                    Узел.Вставить(Ключ, знСтр);
                    Ключ = null;
                }
            }

            if (!(Узел == Неопределено))
            {

                if (!(Старший == null))
                {
                    Узел.Вставить("Старший", Старший);
                    var Родитель = Старший;
                    var СтаршийСоседний = Старший.Получить("_Соседний") as string;
                    if (СтаршийСоседний == Узел.Код)
                    {
                        Родитель = Старший.Родитель;
                    }
                    Узел.Вставить("Родитель", Родитель);
                    if (УзелСвойство(Родитель, "Атрибут") as string == Узел.Код || (Старший.Свойство("ЭтоАтрибут") == Истина && СтаршийСоседний == Узел.Код))
                    {
                        Узел.Вставить("ЭтоАтрибут", Истина);
                    }
                }

                Узлы.Вставить(Код, Узел);

                var УзелДочерний = Узел.Получить("Дочерний");
                if (!(УзелДочерний == Неопределено))
                {
                    Узел.Дочерний = _ПолучитьУзел(_Данные, УзелДочерний, Узел);
                }
                var УзелСоседний = Узел.Получить("_Соседний");
                if (!(УзелСоседний == Неопределено)) // && !(Узел.Имя == "Свойства."))
                {
                    Узел.Соседний = _ПолучитьУзел(_Данные, УзелСоседний, Узел);
                    Узел.Удалить("_Соседний");
                }
                var УзелАтрибут = Узел.Получить("Атрибут");
                if (!(УзелАтрибут == Неопределено))
                {
                    Узел.Атрибут = _ПолучитьУзел(_Данные, УзелАтрибут, Узел);
                }

            }

            return Узел;
        } // ПолучитьУзел()


        void ПрочитатьВетку(Узел Узел)
        {
            if (!(Узел == Неопределено))
            {
                ПрочитатьВетку(ПолучитьУзел(Узел.Атрибут, Узел));
                ПрочитатьВетку(ПолучитьУзел(Узел.Дочерний, Узел));
                ПрочитатьВетку(ПолучитьУзел(Узел.Соседний, Узел));
            }
        }

        //// поиск узла внутри узла
        //public object НайтиУзел(Узел Узел, object ЗначениеУзла, string ИмяУзла = "", bool ПервыйВызов = true)
        //{
        //    var Объявление = Неопределено;
        //    if (Узел.Имя == ИмяУзла || (ИмяУзла == "" && (Узел.Имя == "Узел" || Узел.Имя == "У" || Узел.Имя == "Объект" || Узел.Имя == "О")))
        //    {
        //        if (УзелСвойство(Узел, "Значение") as string == ЗначениеУзла as string)
        //        {
        //            return Узел;
        //        }
        //        else if (ПервыйВызов)
        //        {
        //            if (!(Узел.Дочерний == Неопределено))
        //            {
        //                Объявление = НайтиУзел(Узел.Дочерний, ЗначениеУзла, ИмяУзла, Ложь);
        //            }
        //        }
        //    }
        //    else
        //    {
        //        if (!(Узел.Дочерний == Неопределено))
        //        {
        //            Объявление = НайтиУзел(Узел.Дочерний, ЗначениеУзла, ИмяУзла, Ложь);
        //        }
        //    }
        //    if (Объявление == Неопределено)
        //    {
        //        if (!(Узел.Соседний == Неопределено))
        //        {
        //            Объявление = НайтиУзел(Узел.Соседний, ЗначениеУзла, ИмяУзла, Ложь);
        //        }
        //    }
        //    return Объявление;
        //} // НайтиУзел()


        //public void ЗагрузитьHTML(Узел Узел, Массив СтруктураHTML, ref int НомерЭлемента)
        //{
        //    while (НомерЭлемента < СтруктураHTML.Количество() - 1)
        //    {
        //        var УзелСтрока = СтруктураHTML.Получить(НомерЭлемента) as string;
        //        if (УзелСтрока == "_rt")
        //        {
        //            break;
        //        }
        //        else if (УзелСтрока == "_at")
        //        {
        //            НомерЭлемента = НомерЭлемента + 1;
        //            УзелСтрока = СтруктураHTML.Получить(НомерЭлемента) as string; 
        //            while (!(УзелСтрока == "_rt"))
        //            {
        //                Структура стрУзла = СтрокуВСтруктуру(УзелСтрока);
        //                НовыйАтрибут(Узел, ИмяЗначение(стрУзла.с.attrName, стрУзла.с.attrVal));
        //                НомерЭлемента = НомерЭлемента + 1;
        //                УзелСтрока = СтруктураHTML.Получить(НомерЭлемента) as string;
        //            }
        //            НомерЭлемента = НомерЭлемента + 1;
        //            continue;
        //        }
        //        else if (УзелСтрока == "_ch")
        //        {
        //            НомерЭлемента = НомерЭлемента + 1;
        //            var дУзел = НовыйДочерний(Узел, ИмяЗначение());
        //            ЗагрузитьHTML(дУзел, СтруктураHTML, ref НомерЭлемента);
        //        }
        //        else
        //        {
        //            if (!(Узел.Имя == ""))
        //            {
        //                Узел = НовыйСоседний(Узел, ИмяЗначение());
        //            }
        //            Структура стрУзла = СтрокуВСтруктуру(УзелСтрока);
        //            if (стрУзла.Свойство("tagName"))
        //            {
        //                Узел.Вставить("Имя", стрУзла.с.tagName);
        //            }
        //            else
        //            {
        //                Узел.Вставить("Имя", "text");
        //                Узел.Вставить("Значение", стрУзла.с.text);
        //            }
        //        }
        //        НомерЭлемента = НомерЭлемента + 1;
        //    }
        //} // ЗагрузитьHTML()


        public treedata(Ishowdata обПроцесс, string знИстДанных, string знИмяДанных) : base(обПроцесс, знИстДанных,  знИмяДанных, "1")
        {

            Данные = new treedb(ОбъединитьПути(ОбъединитьПути(ТекущийКаталог(), "data"), ИстДанных, ИмяДанных + ".tdb"));

            Данные.ОткрытьПотокДанных();
            var п = Данные.Размер - 16;
            if (п > 0)
                Корень = ПолучитьУзел(п.ToString());
            else
            {
                Данные.ОткрытьПотокДанных(Истина);
                var м = Новый.Массив();
                м.Добавить(0);
                Данные.ДобавитьЗначение(м);
                Корень = НовыйУзел(ИмяЗначение("О", "Корень"));
            }
            
            Узлы.Вставить("1", Корень);
            Узлы.Вставить(Корень.Код, Корень);

            ОбъектыОбновить.Добавить(Корень);

        }

        // pagedata
        public treedata(Ishowdata обПроцесс, string Текст = "", string знИстДанных = "", string знИмяДанных = "") : base(обПроцесс, знИстДанных, знИмяДанных, "1")
        {

            var Данные = new ТекстовыйДокумент();
            Узлы = Соответствие.Новый();

            if (!(Текст == ""))
            {
                Данные.УстановитьТекст(Текст);
                var Стр1 = Данные.ПолучитьСтроку(1);
                if (КодСимвола(Лев(Стр1, 1)) == 65279)
                { // BOM
                    Данные.ЗаменитьСтроку(1, Сред(Стр1, 2));
                }
            }

            this.Данные = new treedb(ОбъединитьПути(ОбъединитьПути(ТекущийКаталог(), "data"), ИстДанных, ИмяДанных + ".tdb"));
            this.Данные.ОткрытьПотокДанных(Истина);
            var м = Новый.Массив();
            м.Добавить(0);
            this.Данные.ДобавитьЗначение(м);

            Представление = "";
            Корень = _ПолучитьУзел(Данные, "1");

            ПрочитатьВетку(Корень);

            СохранитьДанные();

            Узлы = Соответствие.Новый();
            Узлы.Вставить("1", Корень);

            ОбъектыОбновить.Добавить(Корень);

        }


    }
}
