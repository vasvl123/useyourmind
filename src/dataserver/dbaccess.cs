// /*----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------*/

using System;

using onesharp.Binary;

namespace onesharp
{
    public class dbaccess : useyourmind 
    {

        public dbaccess() : base("dbaccess") { }

        string ИмяФайлаДанных;
        public readonly string ИстДанных;
        public readonly string ИмяДанных;
        string КаталогФайловДанных;
        ФайловыйПоток ПотокДанных;
        public DateTime ВремяИзменения;

        // открыть контейнер для чтения или записи
        public bool ОткрытьПотокДанных(bool ДляЗаписи = false, object Позиция = null)
        {

            try
            {

                if (ДляЗаписи)
                {

                    if (!(ПотокДанных == Неопределено))
                    {
                        if (!(ПотокДанных.ДоступнаЗапись))
                        {
                            ПотокДанных.Закрыть();
                            ПотокДанных = null;
                        }
                    }

                    if (ПотокДанных == Неопределено)
                    {
                        ПотокДанных = МенеджерФайловыхПотоков.ОткрытьДляЗаписи(ИмяФайлаДанных);
                    }

                    if (Позиция == Неопределено)
                    {
                        ПотокДанных.Перейти(0, ПозицияВПотоке.Конец);
                    }
                    else
                    {
                        ПотокДанных.Перейти((long)Позиция, ПозицияВПотоке.Начало);
                    }

                    ВремяИзменения = ТекущаяДата();

                }
                else
                {

                    if (!(ПотокДанных == Неопределено))
                    {
                        if (!(ПотокДанных.ДоступноЧтение))
                        {
                            ПотокДанных.Закрыть();
                            ПотокДанных = null;
                        }
                    }

                    if (ПотокДанных == Неопределено)
                    {
                        ПотокДанных = МенеджерФайловыхПотоков.ОткрытьДляЧтения(ИмяФайлаДанных);
                    }

                    if (!(Позиция == Неопределено))
                    {
                        ПотокДанных.Перейти((long)Позиция, ПозицияВПотоке.Начало);
                    }

                }

                return Истина;

            }
            catch (Exception e)
            {

                Сообщить(ОписаниеОшибки(e));
                return Ложь;

            }

        }


        // Получить заголовки из контейнера
        public Структура ПолучитьЗаголовки()
        {

            ОткрытьПотокДанных();

            if (ПотокДанных == Неопределено)
            {
                return null;
            }

            var Индекс = 0;
            var Результат = Структура.Новый();

            var ПозицияДанных = ПотокДанных.Размер();

            while (ПозицияДанных > 12)
            {

                ПотокДанных.Перейти(ПозицияДанных - 12, ПозицияВПотоке.Начало);

                var Буфер = БуферДвоичныхДанных.Новый(8);
                ПотокДанных.Прочитать(Буфер, 0, 8);
                ПозицияДанных = (long)Буфер.ПрочитатьЦелое64(0);

                Буфер = БуферДвоичныхДанных.Новый(4);
                ПотокДанных.Прочитать(Буфер, 0, 4);
                int ТипДанных = Буфер.ПрочитатьЦелое32(0);

                if (ТипДанных == 1)
                { // Заголовок
                    var дЗаголовок = ПолучитьДанные(ПозицияДанных);
                    Результат.Вставить("З" + Индекс, ДвоичныеДанныеВСтруктуру(дЗаголовок));
                    Индекс = Индекс + 1;
                }

            }

            return Результат;

        } // ПолучитьЗаголовки()


        // найти заголовок по условиям
        public object НайтиЗаголовок(Структура ЗапросДанных)
        {

            string ТолькоОдин = "";
            object _Позиция = null;
            object _ЧислоЗаписей = null;
            object _ПозицияДанных = null;
            object _Направление = null;
            long Позиция;
            long ЧислоЗаписей;
            long ПозицияДанных;
            string Направление;
            object УсловияОтбора = null;

            ОткрытьПотокДанных();

            if (ПотокДанных == Неопределено)
            {
                return "ОшибкаПотокаДанных";
            }

            ЗапросДанных.Свойство("УсловияОтбора", out УсловияОтбора);
            if (УсловияОтбора is Структура)
            {
                if ((УсловияОтбора as Структура).Количество() == 0)
                {
                    УсловияОтбора = null;
                }
            }
            else
            {
                УсловияОтбора = null;
            }

            ЗапросДанных.Свойство("ПозицияДанных", out _ПозицияДанных);
            ЗапросДанных.Свойство("Направление", out _Направление);

            Направление = Строка(_Направление);
            if (Направление == "")
            {
                Направление = "Назад";
            }

            if (_ПозицияДанных == null)
            {
                ЗапросДанных.Свойство("НачальнаяПозиция", out _ПозицияДанных);
            }

            long Размер = ПотокДанных.Размер();

            if (ЗначениеЗаполнено(_ПозицияДанных))
            {
                ПозицияДанных = (Int32)Число(_ПозицияДанных);
            }
            else
            {
                ПозицияДанных = Размер;
            }

            if (ЗапросДанных.Свойство("ПоследняяПозиция", out _Позиция))
            {
                Позиция = (Int32)Число(_Позиция);
            }
            else
            {
                Позиция = 0;
            }

            if (ЗапросДанных.Свойство("ЧислоЗаписей", out _ЧислоЗаписей))
            {
                ЧислоЗаписей = (Int32)Число(_ЧислоЗаписей);
            }
            else
            {
                ЧислоЗаписей = 1;
            }

            //Позиция = Число(Позиция);
            //ЧислоЗаписей = Число(ЧислоЗаписей);

            ЗапросДанных.Вставить("ПоследняяПозиция", Позиция);
            ЗапросДанных.Вставить("ЗаголовокНайден", Ложь);
            var ЗаголовокНайден = Ложь;

            var ВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
            var ЗаписейПрочитано = 0;

            var Результат = "ЗапросВыполняется";

            Структура Запись = null;

            object Завершен = null;

            while (Истина)
            {

                Завершен = (!((ПозицияДанных > 12 && Направление == "Назад") || (ПозицияДанных + 4 < Размер && Направление == "Вперед")) || (Позиция == ЧислоЗаписей));

                // превышение времени ожидания ответа
                if (ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачало > 50)
                {
                    break;
                }

                if ((bool)Завершен)
                {
                    break;
                }

                ПотокДанных.Перейти(ПозицияДанных - 12, ПозицияВПотоке.Начало);

                var Буфер = БуферДвоичныхДанных.Новый(8);
                ПотокДанных.Прочитать(Буфер, 0, 8);
                var зПозицияДанных = (long)Буфер.ПрочитатьЦелое64(0);

                Буфер = БуферДвоичныхДанных.Новый(4);
                ПотокДанных.Прочитать(Буфер, 0, 4);
                var ТипДанных = Буфер.ПрочитатьЦелое32(0);

                ЗаписейПрочитано = ЗаписейПрочитано + 1;

                if (Направление == "Назад")
                {
                    ПозицияДанных = зПозицияДанных;
                }
                else
                {
                    ПотокДанных.Перейти(ПозицияДанных, ПозицияВПотоке.Начало);
                    Буфер = БуферДвоичныхДанных.Новый(4);
                    ПотокДанных.Прочитать(Буфер, 0, 4);
                    var Объем = Буфер.ПрочитатьЦелое32(0);
                    ПозицияДанных = ПозицияДанных + 4 + Объем + 12;
                }

                if (ТипДанных == 1)
                { // Заголовок

                    var дЗаголовок = ПолучитьДанные(зПозицияДанных);
                    var Заголовок = ДвоичныеДанныеВСтруктуру(дЗаголовок) as Структура;

                    // возвращает первое совпадение
                    if (!(УсловияОтбора == Неопределено))
                    {
                        object СвойствоЗначение = null;
                        ЗаголовокНайден = Ложь;
                        foreach (КлючИЗначение элУсловия in УсловияОтбора as Структура)
                        {
                            var зн = элУсловия.Значение as Структура;
                            if (элУсловия.Ключ as string == "ТолькоОдин")
                            {
                                ТолькоОдин = зн.Получить<string>("Значение");
                            }
                            else if (Заголовок.Свойство((string)элУсловия.Ключ, out СвойствоЗначение))
                            {
                                if (зн.Получить<string>("Сравнение") == "Равно")
                                {
                                    ЗаголовокНайден = ((string)СвойствоЗначение == зн.Получить<string>("Значение"));
                                }
                                if (!(ЗаголовокНайден))
                                {
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        ЗаголовокНайден = Истина;
                    }

                    if (ЗаголовокНайден)
                    {
                        if (Запись == Неопределено)
                        {
                            ЗапросДанных.Вставить("ЗаголовокНайден", Истина);
                            Запись = ЗапросДанных;
                        }
                        else
                        {
                            Запись.Вставить("Соседний", Структура.Новый());
                            Запись = Запись.Получить<Структура>("Соседний");
                        }
                        Позиция = Позиция + 1;
                        Запись.Вставить("Заголовок", Заголовок);
                        Запись.Вставить("Позиция", Позиция);
                        if (ТолькоОдин == "Истина")
                        {
                            break;
                        }
                    }

                }

            }

            ЗапросДанных.Вставить("ВремяПоиска", ТекущаяУниверсальнаяДатаВМиллисекундах() - ВремяНачало);
            ЗапросДанных.Вставить("ЗаписейПрочитано", ЗаписейПрочитано);

            ЗапросДанных.Вставить("ПоследняяПозиция", Позиция);
            ЗапросДанных.Вставить("ПозицияДанных", ПозицияДанных);

            if ((bool)Завершен)
            {
                Результат = "ЗапросЗавершен";
                if (ЗапросДанных.Свойство("Обновление"))
                {
                    if (ЗапросДанных.Получить<string>("Обновление") == "Авто")
                    {
                        Результат = "ЗапросПриостановлен";
                    }
                }
            }

            return Результат;

        }


        // найти заголовок по ключу
        Структура НайтиКлюч(string Ключ)
        {

            ОткрытьПотокДанных();

            if (ПотокДанных == Неопределено)
            {
                return null;
            }

            var ДанныеНайти = ПолучитьДвоичныеДанныеИзСтроки(Ключ);
            var ОбъемДанных = ДанныеНайти.Размер();
            var БуферНайти = БуферДвоичныхДанных.Новый(ОбъемДанных);

            long ПозицияДанных = ПотокДанных.Размер();

            var Результат = Структура.Новый("Результат", "ЗаголовокНеНайден");
            //Сообщить(ДанныеНайти);

            while (ПозицияДанных > 12)
            {

                ПотокДанных.Перейти(ПозицияДанных - 12, ПозицияВПотоке.Начало);

                var Буфер = БуферДвоичныхДанных.Новый(8);
                ПотокДанных.Прочитать(Буфер, 0, 8);
                ПозицияДанных = (long)Буфер.ПрочитатьЦелое64(0);

                Буфер = БуферДвоичныхДанных.Новый(4);
                ПотокДанных.Прочитать(Буфер, 0, 4);
                var ТипДанных = Буфер.ПрочитатьЦелое32(0);

                if (ТипДанных == 1)
                { // Заголовок

                    ПотокДанных.Перейти(ПозицияДанных + 4, ПозицияВПотоке.Начало);
                    ПотокДанных.Прочитать(БуферНайти, 0, ОбъемДанных);

                    if (ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(БуферНайти) == ДанныеНайти)
                    {
                        var дЗаголовок = ПолучитьДанные(ПозицияДанных);
                        Результат.Вставить("Результат", "ЗаголовокНайден");
                        Результат.Вставить("Заголовок", дЗаголовок);
                        return Результат;
                    }

                }

            }

            return Результат;

        }


        // получить данные из контейнера и записать в файл
        bool ПолучитьФайл(long Позиция)
        {

            var ИмяФайла = ОбъединитьПути(КаталогФайловДанных, Строка(Позиция));

            var ФайлДанных = Файл.Новый(ИмяФайла);

            if (!(ФайлДанных.Существует()))
            {

                try
                {

                    ОткрытьПотокДанных(Ложь, Позиция);

                    var Буфер = БуферДвоичныхДанных.Новый(4);
                    ПотокДанных.Прочитать(Буфер, 0, 4);
                    var ОбъемДанных = Буфер.ПрочитатьЦелое32(0);

                    Буфер = БуферДвоичныхДанных.Новый(ОбъемДанных);
                    ПотокДанных.Прочитать(Буфер, 0, ОбъемДанных);

                    var ДанныеФайла = МенеджерФайловыхПотоков.ОткрытьДляЗаписи(ИмяФайла);
                    ДанныеФайла.Записать(Буфер, 0, ОбъемДанных);

                    ДанныеФайла.Закрыть();

                }
                catch (Exception e)
                {

                    Сообщить(ОписаниеОшибки(e));
                    return Ложь;

                }

            }

            return Истина;

        }


        // Удалить данные из контейнера (заголовок тип + 10000)
        public string УдалитьДанные(long Позиция)
        {

            ОткрытьПотокДанных(Ложь, Позиция);

            var Буфер = БуферДвоичныхДанных.Новый(4);
            ПотокДанных.Прочитать(Буфер, 0, 4);
            var ОбъемДанных = Буфер.ПрочитатьЦелое32(0);

            Позиция = Позиция + ОбъемДанных + 4 + 12;

            ОткрытьПотокДанных(Ложь, Позиция); // это заголовок данных

            ПотокДанных.Прочитать(Буфер, 0, 4);
            ОбъемДанных = Буфер.ПрочитатьЦелое32(0);

            ОткрытьПотокДанных(Ложь, Позиция + ОбъемДанных + 4 + 8);

            ПотокДанных.Прочитать(Буфер, 0, 4);
            int ТипДанных = Буфер.ПрочитатьЦелое32(0);

            ОткрытьПотокДанных(Истина, Позиция + ОбъемДанных + 4 + 8);
            Буфер.ЗаписатьЦелое32(0, 10000 + ТипДанных);
            ПотокДанных.Записать(Буфер, 0, 4);

            return "Успешно";

        }

        public ДвоичныеДанные ПолучитьДанные(long Позиция, out int ТипДанных)
        {
            ОткрытьПотокДанных(Ложь, Позиция);

            var Буфер = БуферДвоичныхДанных.Новый(4);
            ПотокДанных.Прочитать(Буфер, 0, 4);
            var ОбъемДанных = Буфер.ПрочитатьЦелое32(0);

            Буфер = БуферДвоичныхДанных.Новый(ОбъемДанных);
            ПотокДанных.Прочитать(Буфер, 0, ОбъемДанных);

            // прочитать тип данных
            var Буфер1 = БуферДвоичныхДанных.Новый(4);
            ПотокДанных.Прочитать(Буфер1, 0, 4);
            ПотокДанных.Прочитать(Буфер1, 0, 4);
            ПотокДанных.Прочитать(Буфер1, 0, 4);
            ТипДанных = Буфер1.ПрочитатьЦелое32(0);

            return ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
        }


        // Получить двоичные данные из контейнера
        public ДвоичныеДанные ПолучитьДанные(long Позиция)
        {
            ОткрытьПотокДанных(Ложь, Позиция);

            var Буфер = БуферДвоичныхДанных.Новый(4);
            ПотокДанных.Прочитать(Буфер, 0, 4);
            var ОбъемДанных = Буфер.ПрочитатьЦелое32(0);

            Буфер = БуферДвоичныхДанных.Новый(ОбъемДанных);
            ПотокДанных.Прочитать(Буфер, 0, ОбъемДанных);

            return ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
        }


        // добавить в контейнер заголовок с файлом или без
        public long ДобавитьДанные(Структура Заголовок, ДвоичныеДанные дДанные = null)
        {

            //string ИмяФайла;
            object ТипДанных = null;

            ОткрытьПотокДанных(Истина);

            var ПозицияДанных = ПотокДанных.ТекущаяПозиция();

            if (Заголовок.Свойство("ТипДанных", out ТипДанных) && !(дДанные == Неопределено))
            {
                Заголовок.Вставить("ОбъемДанных", ЗаписатьДанные(дДанные, (int)Число(ТипДанных)));
                Заголовок.Вставить("ПозицияДанных", ПозицияДанных);
            }

            Заголовок.Вставить("Дата", "" + ТекущаяДата());

            var дЗаголовок = СтруктуруВДвоичныеДанные(Заголовок);

            ЗаписатьДанные(дЗаголовок);

            return ПозицияДанных;

        }


        // добавить содержимое файла в контейнер
        long ЗаписатьДанныеФайла(string ИмяФайла)
        {

            var ПозицияДанных = ПотокДанных.ТекущаяПозиция();

            var ДанныеФайла = МенеджерФайловыхПотоков.ОткрытьДляЧтения(ИмяФайла);
            var ОбъемДанных = ДанныеФайла.Размер();

            var Буфер = БуферДвоичныхДанных.Новый(4);
            Буфер.ЗаписатьЦелое32(0, (int)ОбъемДанных);
            ПотокДанных.Записать(Буфер, 0, 4);

            ДанныеФайла.КопироватьВ(ПотокДанных);
            ДанныеФайла.Закрыть();

            Буфер = БуферДвоичныхДанных.Новый(8);
            Буфер.ЗаписатьЦелое64(0, (ulong)ПозицияДанных);
            ПотокДанных.Записать(Буфер, 0, 8);

            var ТипДанных = 2; // 2 = файл

            Буфер = БуферДвоичныхДанных.Новый(4);
            Буфер.ЗаписатьЦелое32(0, ТипДанных);
            ПотокДанных.Записать(Буфер, 0, 4);

            ПотокДанных.СброситьБуферы();

            return ОбъемДанных;

        }


        // добавить двоичные данные в контейнер
        long ЗаписатьДанные(ДвоичныеДанные дДанные, int ТипДанных = 1)
        {

            var ПозицияДанных = ПотокДанных.ТекущаяПозиция();

            var ОбъемДанных = дДанные.Размер();

            var Буфер = БуферДвоичныхДанных.Новый(4);
            Буфер.ЗаписатьЦелое32(0, ОбъемДанных);
            ПотокДанных.Записать(Буфер, 0, 4);

            Буфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(дДанные);
            ПотокДанных.Записать(Буфер, 0, ОбъемДанных);

            Буфер = БуферДвоичныхДанных.Новый(8);
            Буфер.ЗаписатьЦелое64(0, (ulong)ПозицияДанных);
            ПотокДанных.Записать(Буфер, 0, 8);

            Буфер = БуферДвоичныхДанных.Новый(4);
            Буфер.ЗаписатьЦелое32(0, ТипДанных); // 1 = заголовок
            ПотокДанных.Записать(Буфер, 0, 4);

            ПотокДанных.СброситьБуферы();

            return ОбъемДанных;

        }


        public dbaccess(string значКаталогФайловДанных, string значИстДанных, string значИмяДанных) : base("dbaccess")
        {
            КаталогФайловДанных = значКаталогФайловДанных;
            ИстДанных = значИстДанных;
            ИмяДанных = значИмяДанных;
            ИмяФайлаДанных = ОбъединитьПути(КаталогФайловДанных, ИстДанных, ИмяДанных + ".sdb");
            var файл = Файл.Новый(ИмяФайлаДанных);
            if (!(файл.Существует()))
            {
                var дФайл = ПолучитьДвоичныеДанныеИзСтроки("");
                дФайл.Записать(ИмяФайлаДанных);
                файл = Файл.Новый(ИмяФайлаДанных);
            }
            ВремяИзменения = файл.ПолучитьВремяИзменения();
        }


    }
}
