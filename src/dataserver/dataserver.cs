using System;

using onesharp.Binary;
using onesharp.Hash;
using onesharp.lib;

namespace onesharp
{
    class dataserver : useyourmind, Ishowdata
    {

        public dataserver() : base("dataserver") {}

        //string Хост;
        int Порт;
        bool ОстановитьСервер;
        bool ПерезапуститьСервер;
        //Перем Ресурсы;
        string Загрузка;
        Соответствие ВсеДанные;
        Соответствие ЧьиДанные;
        dbaccess Профили;
        string Соль;
        Соответствие Контроллеры;
        DateTime ОбновитьСписокФайлов;
        DateTime ОбновитьСписокБаз;
        Соответствие Задачи;
        Массив мЗадачи;
        //int АктивныеЗадачи;
        Массив Соединения;
        Массив ДанныеОбновить;
        Соответствие Библиотеки;

        object УзелСвойство(Структура Узел, string Свойство)
        {
            object УзелСвойство = null;
            if (!(Узел == Неопределено))
            {
                Узел.Свойство(Свойство, out УзелСвойство);
            }
            return УзелСвойство;
        }


        string УдаленныйУзелАдрес(string УдаленныйУзел)
        {
            return Лев(УдаленныйУзел, Найти(УдаленныйУзел, ":") - 1);
        }


        Структура НовоеУсловиеОтбора(Структура ЗапросДанных, string КлючИмя, string Сравнение, string КлючЗначение)
        {
            if (ЗапросДанных == Неопределено)
            {
                ЗапросДанных = Структура.Новый("УсловияОтбора", Структура.Новый());
            }
            ЗапросДанных.с.УсловияОтбора.Вставить(КлючИмя, Структура.Новый("Сравнение, Значение", Сравнение, КлючЗначение));
            return ЗапросДанных;
        }


        // расшифровывает данные по ключу
        object Расшифровать(string Шифр, string КлючШифрования)
        {
            var бШифр = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзBase64Строки(Шифр));
            var бКлючШифрования = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзBase64Строки(КлючШифрования));
            var ЗакодированныеДанные = БуферДвоичныхДанных.Новый(32);
            for (int Счетчик = 0; Счетчик < 32; Счетчик++)
            {
                var ЗначениеКлюча = бКлючШифрования.Получить(Счетчик);
                var ЗакодированноеЗначение = бШифр.Получить(Счетчик);
                var ЗначениеИсходныхДанных = ЗакодированноеЗначение - ЗначениеКлюча;
                if (ЗначениеИсходныхДанных < 0)
                {
                    ЗначениеИсходныхДанных = ЗначениеИсходныхДанных + 256;
                }
                ЗакодированныеДанные.Установить(Счетчик, (byte)ЗначениеИсходныхДанных);
            }
            return ПолучитьBase64СтрокуИзДвоичныхДанных(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(ЗакодированныеДанные));
        }


        bool ПроверкаАвторизации(Структура Параметры)
        {
            var Профиль = Структура.Новый();
            var ПрошелАвторизацию = Ложь;
            var СтатусСубъекта = "Гость";
            object Имя = null;
            var Результат = Структура.Новый();
            if (Параметры.Свойство("unm", out Имя))
            {
                СтатусСубъекта = "Не авторизован";
                if (ЗначениеЗаполнено(Имя))
                {
                    //Профиль = Профили.НайтиКлюч("Имя" + Символы.Таб + Имя + Символы.Таб);
                    var ЗапросДанных = НовоеУсловиеОтбора(null, "Имя", "Равно", Строка(Имя));
                    ЗапросДанных = НовоеУсловиеОтбора(ЗапросДанных, "ТолькоОдин", "Равно", "Истина");
                    СтатусСубъекта = "Неизвестный субъект";
                    if (!(Профили.НайтиЗаголовок(ЗапросДанных) as string == "ОшибкаПотокаДанных"))
                    {
                        if (ЗапросДанных.с.ЗаголовокНайден)
                        {
                            Профиль = ЗапросДанных.с.Заголовок;
                            СтатусСубъекта = "Неверный пароль";
                            if (!("" + Профиль.с.Пароль == ""))
                            {
                                var Хэш = ХешированиеДанных.Новый(ХешФункция.SHA256);
                                Хэш.Добавить(Параметры.с.procid + Параметры.с.uid + Профиль.с.Пароль);
                                if (ПолучитьBase64СтрокуИзДвоичныхДанных((ДвоичныеДанные)Хэш.ХешСумма) == Параметры.с.pwd)
                                {
                                    СтатусСубъекта = "Прошел авторизацию";
                                    ПрошелАвторизацию = Истина;
                                }
                            }
                        }
                    }
                }
            }
            Параметры.Вставить("ПрошелАвторизацию", ПрошелАвторизацию);
            Параметры.Вставить("СтатусСубъекта", СтатусСубъекта);
            Параметры.Вставить("Профиль", Профиль);
            Сообщить(СтатусСубъекта);
            return ПрошелАвторизацию;
        } // ПроверкаАвторизации()


        bool ВыполнитьРегистрацию(Структура Параметры)
        {
            string Имя = null;
            string Почта = null;
            var Профиль = Структура.Новый();
            string Пароль = null;
            var ПрошелАвторизацию = Ложь;
            var ТекстСообщение = "Введите свое имя";
            var ТекстСтатус = "Внимание";
            Параметры.Вставить("Этап", "");
            Параметры.Вставить("key", "");
            if (Параметры.Свойство("unm"))
            {
                Имя = Параметры.с.unm;
                if (!(Имя == "" && !(Имя == "sys")))
                {
                    //Профиль = Профили.НайтиКлюч("Имя" + Символы.Таб + Имя + Символы.Таб);
                    var ЗапросДанных = НовоеУсловиеОтбора(null, "Имя", "Равно", Имя);
                    ЗапросДанных = НовоеУсловиеОтбора(ЗапросДанных, "ТолькоОдин", "Равно", "Истина");
                    if (!(Профили.НайтиЗаголовок(ЗапросДанных) as string == "ОшибкаПотокаДанных"))
                    {
                        if (!(ЗапросДанных.с.ЗаголовокНайден))
                        {
                            Сообщить("Профиль не найден");
                            Профиль = Структура.Новый("Имя, Пароль, Почта, Ключ, Дата, УдаленныйУзел", Имя, "", "", "", ТекущаяДата(), Параметры.с.УдаленныйУзел);
                        }
                        else
                        {
                            Профиль = ЗапросДанных.с.Заголовок;
                        }
                        if (!(Профиль.с.Пароль == ""))
                        {
                            ТекстСообщение = "Такое имя уже существует";
                        }
                        else
                        {
                            ТекстСообщение = "Укажите свой почтовый ящик";
                            if (Параметры.Свойство("mail"))
                            {
                                Почта = Параметры.с.mail;
                                if (!(Почта == ""))
                                {
                                    ТекстСообщение = "Введите пароль два раза";
                                    Параметры.Вставить("Этап", "Подтверждение");
                                    Профиль.с.Почта = Почта;
                                    if (Профиль.с.Ключ == "")
                                    {
                                        var Хэш = ХешированиеДанных.Новый(ХешФункция.SHA256);
                                        Хэш.Добавить(Соль + ПолучитьИД());
                                        var Ключ = ПолучитьBase64СтрокуИзДвоичныхДанных((ДвоичныеДанные)Хэш.ХешСумма);
                                        Профиль.с.Ключ = Ключ;
                                        Сообщить(Ключ);
                                        Профили.ДобавитьДанные(Профиль);
                                    }
                                    else
                                    {
                                        Параметры.Вставить("key", Профиль.с.Ключ);
                                        if (Параметры.Свойство("pwd2"))
                                        {
                                            Пароль = Параметры.с.pwd2;
                                            var Хэш = ХешированиеДанных.Новый(ХешФункция.SHA256);
                                            Хэш.Добавить(Имя);
                                            var ПустойПароль = ПолучитьBase64СтрокуИзДвоичныхДанных((ДвоичныеДанные)Хэш.ХешСумма);
                                            Пароль = Расшифровать(Пароль, Профиль.с.Ключ);
                                            if (!(Пароль == ПустойПароль))
                                            { // не пустой
                                                ТекстСообщение = "Пароли не совпадают";
                                                Хэш = ХешированиеДанных.Новый(ХешФункция.SHA256);
                                                Хэш.Добавить(Параметры.с.procid + Параметры.с.uid + Пароль);
                                                if (ПолучитьBase64СтрокуИзДвоичныхДанных((ДвоичныеДанные)Хэш.ХешСумма) == Параметры.с.pwd)
                                                {
                                                    ТекстСообщение = "Регистрация выполнена";
                                                    ТекстСтатус = "Информация";
                                                    Профиль.с.Пароль = Пароль;
                                                    ПрошелАвторизацию = Истина;
                                                    Профили.ДобавитьДанные(Профиль);
                                                }
                                            }
                                        }
                                    }
                                    Параметры.Вставить("key", Профиль.с.Ключ);
                                }
                            }
                        }
                    }
                }
            }
            Параметры.Вставить("ПрошелАвторизацию", ПрошелАвторизацию);
            Параметры.Вставить("ТекстСообщение", ТекстСообщение);
            Параметры.Вставить("ТекстСтатус", ТекстСтатус);
            Параметры.Вставить("Профиль", Профиль);
            Сообщить(ТекстСообщение);
            return ПрошелАвторизацию;
        } // ВыполнитьРегистрацию()


        Соответствие ПолучитьВложение(Соответствие Коллекция, object Ключ)
        {
            var в = Коллекция.Получить(Ключ) as Соответствие;
            if (в == Неопределено)
            {
                в = Новый.Соответствие();
                Коллекция.Вставить(Ключ, в);
            }
            return в;
        }


        T ПолучитьДанные<T>(string ИстДанных, string ИмяДанных)
        {
            var Сис = ОбъединитьПути(ТекущийКаталог(), "data");

            var Источники = ПолучитьВложение(ВсеДанные, ИстДанных);
            var Данные = Источники.Получить(ИмяДанных);

            if (Данные == Неопределено)
            {
                if (typeof(T) == typeof(dbaccess))
                {
                    Данные = new dbaccess(Сис, ИстДанных, ИмяДанных);
                    Источники.Вставить(ИмяДанных, Данные);
                    ОбновитьСписокБаз = ТекущаяДата();
                }
                else if (typeof(T) == typeof(treedata))
                {
                    var ИмяФайлаДанных = ОбъединитьПути(Сис, ИмяДанных + ".sd");
                    var файл = Файл.Новый(ИмяФайлаДанных);
                    if (файл.Существует())
                    {
                        var дДанные = new ДвоичныеДанные(ИмяФайлаДанных);
                        Данные = new treedata(this, ПолучитьСтрокуИзДвоичныхДанных(дДанные), ИстДанных, ИмяДанных);
                    }
                    else
                        Данные = new treedata(this, ИстДанных, ИмяДанных);

                    Источники.Вставить(ИмяДанных, Данные);

                }
            }
            return (T)Данные;
        }

        bool ОбработатьДанные(Задача структЗадача = null)
        {

            if (структЗадача != null)
            {
                var Запрос = структЗадача.Запрос["Запрос"] as Структура;
                var Действие = Запрос["cmd"] as string;

                var ИмяДанных = Запрос["ИмяДанных"] as string;
                var ИстДанных = "" + Запрос["Истданных"] as string;

                var Данные = ПолучитьДанные<treedata>(ИстДанных, ИмяДанных);

                if (Данные != null)
                {
                    if (Действие == "ПолучитьДанные") // открыть данные
                    {
                        var ИдПроцесса = структЗадача.Запрос["ИдПроцесса"] as string;
                        var Контроллер = Контроллеры.Получить(ИдПроцесса);
                        var Процессы = ПолучитьВложение(ЧьиДанные, Данные);
                        Процессы.Вставить(ИдПроцесса, Контроллер);

                        Данные.ОбъектыОбновить.Добавить(Данные.Корень);
                    }
                }
            }

            foreach (КлючИЗначение элИсточник in ВсеДанные)
            {
                foreach (КлючИЗначение элДанные in элИсточник.Значение as Соответствие)
                {
                    if (элДанные.Значение is treedata)
                    {
                        var Данные = элДанные.Значение as treedata;
                        if (Данные.ОбъектыОбновить.Количество() != 0)
                            if (ДанныеОбновить.Найти(Данные) == -1) ДанныеОбновить.Добавить(Данные);
                    }
                }
            }

            return false;
        }


        bool? ВыполнитьЗадачу(Задача структЗадача)
        {
            string ИстДанных;
            string ИмяДанных;
            string БазаДанных;

            object _Команда = null;
            object procid = null;

            string ПозицияДанных;
            Структура ЗапросДанных;

            dbaccess Данные = null;

            var Профиль = Структура.Новый();

            var Запрос = структЗадача.Запрос;

            БазаДанных = "" + УзелСвойство(Запрос, "БазаДанных");
            ИстДанных = "" + УзелСвойство(Запрос, "ИстДанных");
            ИмяДанных = "" + УзелСвойство(Запрос, "ИмяДанных");

            var Субъект = ""; // имя пользователя

            // Если ИстДанных = "" Тогда
            // 	ИстДанных = "public";
            // КонецЕсли;

            Запрос.Свойство("procid", out procid);
            Запрос.Свойство("cmd", out _Команда);

            if (_Команда == Неопределено)
            {
                Запрос.Свойство("Команда", out _Команда);
            }

            var Команда = (string)_Команда;

            Сообщить("dataserver: " + структЗадача.ИдЗадачи + " " + Команда);

            if (Команда == "init")
            { // регистрация контроллера
                if (!(procid == Неопределено))
                {
                    Контроллеры.Вставить(Строка(procid), Запрос);
                }
                return Ложь;
            }

            object ИдПроцесса = УзелСвойство(Запрос, "ИдПроцесса");
            if (!(ИдПроцесса == Неопределено))
            {
                var Контроллер = Контроллеры.Получить(Строка(ИдПроцесса)) as Структура;
                if (!(Контроллер == Неопределено))
                {
                    Профиль = УзелСвойство(Контроллер, "Профиль") as Структура;
                    if (!(Профиль == Неопределено))
                    {
                        Субъект = Профиль.Получить<string>("Имя");
                        var Каталог = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", Субъект));
                        var файл = Файл.Новый(Каталог);
                        if (!(файл.Существует()))
                        {
                            СоздатьКаталог(Каталог);
                        }
                    }
                }
                else
                {
                    //структЗадача.Ответ = "ЗапросВыполняется";
                    Сообщить("dataserver: " + "контроллер не зарегистрирован");
                    return Ложь;
                }
            }

            if (Команда == "ОбработатьДанные")
                return ОбработатьДанные(структЗадача);

            if (Команда == "ПолучитьДанные")
            {

                if (БазаДанных == "")
                { // чтение данных из файла
                    try
                    {
                        ИмяДанных = Запрос.ИмяДанных;
                        if ((ИстДанных == Субъект || ИстДанных == "" || ИстДанных == "public"))
                        {

                            var _Данные = ПолучитьДанные<treedata>(ИстДанных, ИмяДанных);

                            string ИмяФайлаДанных = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", (ИстДанных == "") ? Субъект : ИстДанных), ИмяДанных + ".sd");
                            var файл = Файл.Новый(ИмяФайлаДанных);
                            if (файл.Существует())
                            { // у себя
                                структЗадача.Вставить("Результат", Структура.Новый("Данные", new ДвоичныеДанные(ИмяФайлаДанных)));
                                структЗадача.Вставить("Ответ", "Успешно");
                                return Истина;
                            }
                            if (!(файл.Существует()))
                            {
                                if (ИстДанных == "")
                                {
                                    ИмяФайлаДанных = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", "public"), ИмяДанных + ".sd");
                                    файл = Файл.Новый(ИмяФайлаДанных);
                                    if (файл.Существует())
                                    { // public
                                        структЗадача.Вставить("Результат", Структура.Новый("Данные", new ДвоичныеДанные(ИмяФайлаДанных)));
                                        структЗадача.Вставить("Ответ", "Успешно");
                                        return Истина;
                                    }
                                    else
                                    {
                                        БазаДанных = "public"; // поискать еще в public.sdb
                                    }
                                }
                                else
                                {
                                    структЗадача.Вставить("Ответ", "НеНайден");
                                    return Истина;
                                }
                            }
                        }
                        else
                        {
                            структЗадача.Вставить("Ответ", "Запрещено");
                        }
                    }
                    catch (Exception e)
                    {
                        структЗадача.Вставить("Ответ", "Ошибка");
                        Сообщить(ОписаниеОшибки(e));
                        return Ложь;
                    }

                }

            }

            if (Команда == "stopserver")
            {
                ОстановитьСервер = Истина;
                return Ложь;

            }
            else if (Команда == "termproc")
            {
                УдалитьКонтроллерИЗадачи(Строка(procid)); // удалить контроллер и его задачи
                return Ложь;

            }
            else if (Команда == "auth" || Команда == "reg")
            {
                bool Результат = false;

                if (Команда == "auth")
                {
                    Результат = ПроверкаАвторизации(Запрос.ЗапросДанные);
                }
                else
                {
                    Результат = ВыполнитьРегистрацию(Запрос.ЗапросДанные);
                }

                if (Результат == Истина)
                {
                    var Контроллер = Контроллеры.Получить(Запрос.ИдПроцесса) as Структура;
                    if (!(Контроллер == Неопределено))
                    {
                        Контроллер.Вставить("Субъект", Запрос.ЗапросДанные.с.Профиль.с.Имя);
                        Контроллер.Вставить("Профиль", Запрос.ЗапросДанные.с.Профиль);
                    }
                }
                //структЗадача.Вставить("Ответ", Результат);
                структЗадача.Вставить("Результат", Запрос.ЗапросДанные);
                return Истина;

            }
            else if (Команда == "ЗавершитьЗадачу")
            { // завершить существующую задачу
                foreach (КлючИЗначение элЗадача in Задачи)
                {
                    var стрЗадача = элЗадача.Значение as Задача;
                    if (стрЗадача.Запрос.Свойство("ОбратныйЗапрос"))
                    {
                        if (стрЗадача.Запрос.ОбратныйЗапрос.Получить<string>("ИдЗадачи") == Запрос.сЗадача)
                        {
                            стрЗадача.Ответ = "ЗавершитьЗадачу";
                            стрЗадача.Результат = Ложь;
                            break;
                        }
                    }
                }
                return Истина;

            }
            else if (Команда == "ЗаписатьЗаголовок")
            { // запись заголовка
                if (БазаДанных == "web" || БазаДанных == "log")
                { // системные базы
                    Данные = ПолучитьДанные<dbaccess>("sys", БазаДанных);
                }
                else if (ИстДанных == Субъект)
                {
                    Данные = ПолучитьДанные<dbaccess>(Субъект, БазаДанных);
                }
                else
                {
                    Данные = ПолучитьДанные<dbaccess>(ИстДанных, "inbox");
                }
                if (Данные.ОткрытьПотокДанных(Истина))
                {
                    if (Запрос.Свойство("Заголовок"))
                    {
                        структЗадача.Вставить("Результат", Данные.ДобавитьДанные(Запрос.Заголовок));
                    }
                }
                return Истина;

            }
            else if (Команда == "ЗаписатьДанные")
            { // запись данных
                try
                {
                    // Если НЕ Суб = "" Тогда // контроль прав
                    if (!(БазаДанных == ""))
                    { // имя контейнера указано
                        if (ИстДанных == Субъект)
                        {
                            Данные = ПолучитьДанные<dbaccess>(Субъект, БазаДанных);
                        }
                        else if (ИстДанных == "")
                        {
                            Данные = ПолучитьДанные<dbaccess>(Субъект, "inbox");
                        }
                        else
                        {
                            Данные = ПолучитьДанные<dbaccess>(ИстДанных, "inbox");
                        }
                        if (Данные.ОткрытьПотокДанных(Истина))
                        {
                            if (Запрос.Свойство("Заголовок"))
                            {
                                структЗадача.Вставить("Результат", Данные.ДобавитьДанные(Запрос.Заголовок, Запрос.дДанные));
                                структЗадача.Вставить("Ответ", "Успешно");
                            }
                        }
                    }
                    else
                    { // записать в файл
                        var ИмяФайлаДанных = ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", Субъект), Запрос.Заголовок.с.ИмяДанных + ".sd");
                        Запрос.дДанные.Записать(ИмяФайлаДанных);
                        структЗадача.Вставить("Результат", "");
                        структЗадача.Вставить("Ответ", "Успешно");
                        ОбновитьСписокФайлов = ТекущаяДата();
                    }
                    // Иначе
                    // 	структЗадача.Вставить("Результат", "");
                    // 	структЗадача.Вставить("Ответ", "Нет прав");
                    // КонецЕсли;
                }
                catch (Exception e)
                {
                    структЗадача.Вставить("Ответ", "Ошибка");
                    Сообщить(ОписаниеОшибки(e));
                }
                return Истина;

            }
            else if (Команда == "ЗапросДанных")
            { // выбрать данные по запросу

                if (Запрос.ЗапросДанных.с.Команда == "НайтиЗаголовок")
                { // выбрать данные по запросу

                    object Ключ = структЗадача.Получить("Данные");
                    if (Ключ != Неопределено)
                    {
                        Данные = (dbaccess)ВсеДанные.Получить(Строка(Ключ));
                    }
                    else
                    {
                        if (БазаДанных == "web" || БазаДанных == "log")
                        { // системные базы
                            Данные = ПолучитьДанные<dbaccess>("sys", БазаДанных);
                        }
                        else if (ИстДанных == Субъект)
                        {
                            Данные = ПолучитьДанные<dbaccess>(Субъект, БазаДанных);
                        }
                        else if (ИстДанных == "")
                        {
                            Данные = ПолучитьДанные<dbaccess>("public", "public");
                        }
                        else
                        {
                            Данные = ПолучитьДанные<dbaccess>(ИстДанных, "public");
                        }
                        // Иначе
                        // 	структЗадача.Вставить("Результат", "");
                        // 	структЗадача.Вставить("Ответ", "Нет прав");
                        // 	Возврат Истина;
                        // КонецЕсли;
                        if (Данные == Неопределено) return null;
                        структЗадача.Вставить("Данные", Данные.ИстДанных + "/" + Данные.ИмяДанных);
                    }

                    структЗадача.Вставить("Ответ", Данные.НайтиЗаголовок(Запрос.ЗапросДанных));
                    Сообщить("ЗаписейПрочитано: " + Запрос.ЗапросДанных.с.ЗаписейПрочитано + " за " + Запрос.ЗапросДанных.с.ВремяПоиска + " мс.");
                    if (Запрос.ЗапросДанных.с.ЗаголовокНайден == Истина || структЗадача.Ответ == "ЗапросЗавершен" || структЗадача.Ответ == "ЗапросПриостановлен")
                    {
                        структЗадача.Вставить("Результат", Запрос.ЗапросДанных);
                        return Истина;
                    }

                }
                else if (Запрос.ЗапросДанных.с.Команда == "СписокБаз" || Запрос.ЗапросДанных.с.Команда == "СписокФайлов")
                {
                    if (!(Запрос.Свойство("СписокФайлов")))
                    {
                        Запрос.Вставить("СписокФайлов", Массив.Новый());
                        var ТипФ = "";
                        if (Запрос.ЗапросДанных.с.Команда == "СписокБаз")
                        {
                            ТипФ = "*.sdb"; // базы пользователя
                        }
                        else
                        {
                            ТипФ = "*.sd;*.tdb"; // СписокФайлов
                        }
                        var СписокФайлов = НайтиФайлы(ОбъединитьПути(ТекущийКаталог(), ОбъединитьПути("data", Субъект)), ТипФ, Ложь);
                        if (СписокФайлов.Количество() != 0)
                        {
                            Запрос.Вставить("ВсегоЭлементов", СписокФайлов.Количество());
                            foreach (Файл элФайл in СписокФайлов)
                            {
                                var Заголовок = Структура.Новый();
                                Заголовок.Вставить("ИмяФайла", элФайл.ИмяБезРасширения);
                                Заголовок.Вставить("ВремяИзменения", элФайл.ПолучитьВремяИзменения());
                                Заголовок.Вставить("Размер", элФайл.Размер());
                                Запрос.СписокФайлов.Добавить(Заголовок);
                            }
                        }
                        if (!(Запрос.ЗапросДанных.Свойство("Позиция")))
                        {
                            Запрос.ЗапросДанных.Вставить("Позиция", 0);
                        }
                    }
                    int Позиция = Число(Запрос.ЗапросДанных.с.Позиция);
                    Запрос.ЗапросДанных.Вставить("ЗаголовокНайден", Ложь);
                    ЗапросДанных = null;
                    while (Позиция < Запрос.СписокФайлов.Количество())
                    {
                        if (ЗапросДанных == Неопределено)
                        {
                            Запрос.ЗапросДанных.Вставить("ЗаголовокНайден", Истина);
                            ЗапросДанных = Запрос.ЗапросДанных;
                        }
                        else
                        {
                            ЗапросДанных.Вставить("Соседний", Структура.Новый());
                            ЗапросДанных = ЗапросДанных.с.Соседний;
                        }

                        ЗапросДанных.Вставить("Заголовок", Запрос.СписокФайлов.Получить(Позиция));
                        Позиция = Позиция + 1;
                        ЗапросДанных.Вставить("Позиция", Позиция);
                    }
                    структЗадача.Вставить("Ответ", "ЗапросЗавершен");
                    if (Запрос.ЗапросДанных.Свойство("Обновление"))
                    {
                        if (Запрос.ЗапросДанных.с.Обновление == "Авто")
                        {
                            структЗадача.Вставить("Ответ", "ЗапросПриостановлен");
                        }
                    }
                    структЗадача.Вставить("Результат", Запрос.ЗапросДанных);
                    return Истина;
                }

                return Ложь;

            }
            else if (Команда == "ПолучитьДанные")
            {

                if (БазаДанных == "web" || БазаДанных == "log")
                { // системные базы
                    Данные = ПолучитьДанные<dbaccess>("sys", БазаДанных);
                }
                else if (ИстДанных == Субъект)
                {
                    Данные = ПолучитьДанные<dbaccess>(Субъект, БазаДанных);
                }
                else if (ИстДанных == "")
                {
                    Данные = ПолучитьДанные<dbaccess>("public", "public");
                }
                else
                {
                    Данные = ПолучитьДанные<dbaccess>(ИстДанных, "public");
                }
                // Иначе
                // 	структЗадача.Вставить("Результат", "");
                // 	структЗадача.Вставить("Ответ", "Нет прав");
                // 	Возврат Истина;
                // КонецЕсли;

                ПозицияДанных = "" + Строка(УзелСвойство(Запрос, "ПозицияДанных"));

                if (!(ПозицияДанных == ""))
                { // прочитать файл по позиции в контейнере
                    int ТипДанных;
                    структЗадача.Вставить("Результат", Структура.Новый("Данные", Данные.ПолучитьДанные((int)Число(ПозицияДанных), out ТипДанных)));
                    ((Структура)структЗадача.Результат).Вставить("ТипДанных", ТипДанных);
                    структЗадача.Вставить("Ответ", "Успешно");

                }
                else if (!(ИмяДанных == ""))
                { // найти по имени данных
                    ЗапросДанных = НовоеУсловиеОтбора(null, "ИмяДанных", "Равно", ИмяДанных);
                    Данные.НайтиЗаголовок(ЗапросДанных);
                    Сообщить("ЗаписейПрочитано: " + ЗапросДанных.с.ЗаписейПрочитано + " за " + ЗапросДанных.с.ВремяПоиска + " мс.");
                    if (ЗапросДанных.с.ЗаголовокНайден == Истина)
                    {
                        ЗапросДанных.с.Заголовок.Вставить("Данные", Данные.ПолучитьДанные(Число(ЗапросДанных.с.Заголовок.ПозицияДанных)));
                        структЗадача.Вставить("Результат", ЗапросДанных.с.Заголовок);
                        структЗадача.Вставить("Ответ", "Успешно");
                    }
                    else
                    {
                        структЗадача.Вставить("Ответ", "НеНайден");
                    }

                }
                else
                { // получить список контейнеров
                    структЗадача.Вставить("Результат", Данные.ПолучитьЗаголовки());
                    структЗадача.Вставить("Ответ", "Успешно");
                }

            }
            else if (Команда == "УдалитьДанные")
            {

                if (ИстДанных == Субъект)
                {
                    Данные = ПолучитьДанные<dbaccess>(Субъект, БазаДанных) as dbaccess;
                    ПозицияДанных = "" + УзелСвойство(Запрос, "ПозицияДанных");
                    if (!(ПозицияДанных == ""))
                    { // удалить по позиции в контейнере
                        структЗадача.Вставить("Ответ", Данные.УдалитьДанные((long)Число(ПозицияДанных)));
                    }
                }
                else
                {
                    структЗадача.Вставить("Ответ", "Нет доступа");
                }

            }
            else if (Команда == "ВнешнийЗапрос")
            {

                Контроллеры.Вставить(Запрос.База, структЗадача);

                if (Запрос.Свойство("ИдЗадачи"))
                { // есть результат
                    var рЗадача = Задачи.Получить<Задача>(Запрос.ИдЗадачи);
                    рЗадача.Вставить("Результат", Запрос.Результат);
                }

                return Ложь;

            }
            else if (Команда == "ВнешниеДанные")
            {

                var кЗадача = Контроллеры.Получить(Запрос.Параметры.с.База) as Задача;
                if (!(кЗадача == Неопределено))
                { // есть соединение с базой
                    if (кЗадача.Результат == Неопределено)
                    { // послать запрос
                        Запрос.Параметры.Вставить("ИдЗадачи", структЗадача.ИдЗадачи);
                        кЗадача.Результат = СтруктуруВДвоичныеДанные(Запрос.Параметры);
                    }
                }

                return Ложь;

            }
            else
            {

                структЗадача.Результат = "Неизвестная команда";

            }

            return Истина;

        }


        void УдалитьКонтроллерИЗадачи(string ИдКонтроллера)
        {
            Контроллеры.Удалить(ИдКонтроллера);
            foreach (КлючИЗначение элЗадача in Задачи)
            {
                var Задача = элЗадача.Значение as Задача;
                if (Задача.Запрос.Свойство("ИдПроцесса"))
                {
                    if (Задача.Запрос.ИдПроцесса == ИдКонтроллера)
                    {
                        Задача.Этап = "Удалить";
                    }
                }
            }
        }


        void ОбработатьСоединения()
        {

            Соль = "123";

            //Версия = "0.0.1";
            //Хост = "127.0.0.1";

            Порт = 8887;

            if (АргументыКоманднойСтроки.Length != 0)
            {
                Порт = (int)Число(АргументыКоманднойСтроки[0]);
            }

            var Таймаут = 5;

            var TCPСервер = new TCPСервер(Порт);
            TCPСервер.ЗапуститьАсинхронно();
            Сообщить(ТекущаяДата() + " Дата-сервер запущен на порту: " + Порт);

            Задачи = Соответствие.Новый();
            мЗадачи = Массив.Новый();

            ОстановитьСервер = Ложь;
            ПерезапуститьСервер = Ложь;
            TCPСоединение Соединение = null;

            //ПодключитьСценарий(ОбъединитьПути(ТекущийКаталог(), "dbaccess.os"), "dbaccess");
            ВсеДанные = Соответствие.Новый();
            ЧьиДанные = Соответствие.Новый();
            Библиотеки = Соответствие.Новый();

            ДанныеОбновить = Массив.Новый();

            Контроллеры = Соответствие.Новый();

            Соединения = Массив.Новый();

            Профили = new dbaccess(ОбъединитьПути(ТекущийКаталог(), "data"), "sys", "users");

            var СуммаЦиклов = 0;
            var РабочийЦикл = 0;
            var ЗамерВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
            ОбновитьСписокФайлов = ТекущаяДата();
            ОбновитьСписокБаз = ТекущаяДата();

            var ПредЗамер = ЗамерВремени;

            while (!(ОстановитьСервер))
            {

                var НачалоЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах();
                СуммаЦиклов = СуммаЦиклов + 1;

                if (СуммаЦиклов > 999)
                {
                    ПредЗамер = ЗамерВремени;
                    ЗамерВремени = ТекущаяУниверсальнаяДатаВМиллисекундах();
                    Загрузка = " " + РабочийЦикл / 10 + "% " + Цел(1000 * РабочийЦикл / (ЗамерВремени - ПредЗамер)) + " q/s " + Задачи.Количество() + " tasks";
                    СуммаЦиклов = 0;
                    РабочийЦикл = 0;
                }

                //АктивныеЗадачи = 0;
                var к = мЗадачи.Количество();
                while (к > 0 && !(ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла > 50))
                {
                    к = к - 1;
                    var структЗадача = мЗадачи.Получить(0) as Задача;
                    мЗадачи.Удалить(0);

                    if (структЗадача.Этап == "Данные")
                    {
                        if (структЗадача.Соединение.Статус == "Данные")
                        {
                            //РазобратьДанныеЗапроса(структЗадача);
                            структЗадача.Этап = "Новая";
                        }
                        else if (структЗадача.Соединение.Статус == "Ошибка")
                        {
                            структЗадача.Этап = "Удалить";
                        }
                    }

                    if (структЗадача.Этап == "Приостановлен")
                    {
                        var Выполнить = Ложь;

                        if (структЗадача.Запрос.Свойство("Команда"))
                        {
                            if (структЗадача.Запрос.Команда == "ЗапросДанных")
                            {
                                if (структЗадача.Запрос.ЗапросДанных.с.Команда == "СписокФайлов")
                                {
                                    if (ОбновитьСписокФайлов > структЗадача.ВремяСоздания)
                                    {
                                        структЗадача.Запрос.ЗапросДанных.с.Позиция = 0;
                                        структЗадача.Запрос.Удалить("СписокФайлов");
                                        структЗадача.ВремяСоздания = ТекущаяДата();
                                        Выполнить = Истина;
                                    }
                                }
                                if (структЗадача.Запрос.ЗапросДанных.с.Команда == "СписокБаз")
                                {
                                    if (ОбновитьСписокБаз > структЗадача.ВремяСоздания)
                                    {
                                        структЗадача.Запрос.ЗапросДанных.с.Позиция = 0;
                                        структЗадача.Запрос.Удалить("СписокФайлов");
                                        структЗадача.ВремяСоздания = ТекущаяДата();
                                        Выполнить = Истина;
                                    }
                                }
                                if (структЗадача.Запрос.ЗапросДанных.с.Команда == "НайтиЗаголовок")
                                {
                                    var Данные = (dbaccess)ВсеДанные.Получить(структЗадача.Данные);
                                    if (Данные != null)
                                        if (Данные.ВремяИзменения > структЗадача.ВремяСоздания)
                                        {
                                            структЗадача.Запрос.ЗапросДанных.с.ПоследняяПозиция = 0;
                                            структЗадача.Запрос.ЗапросДанных.Удалить("ПозицияДанных");
                                            структЗадача.ВремяСоздания = ТекущаяДата();
                                            Выполнить = Истина;
                                        }
                                }
                            }
                        }
                        if (Выполнить) структЗадача.Этап = "Выполнить";
                    }


                    if (структЗадача.Этап == "Выполнить")
                    {

                        bool? ЕстьРезультат = null;

                        РабочийЦикл = РабочийЦикл + 1;
                        try
                        {
                            структЗадача.Вставить("Ответ", "");
                            ЕстьРезультат = ВыполнитьЗадачу(структЗадача);
                        }
                        catch (Exception e)
                        {
                            Сообщить(ОписаниеОшибки(e));
                            ЕстьРезультат = false;
                        }

                        if (ЕстьРезультат == Истина)
                        {
                            try
                            {
                                var Запрос = структЗадача.Запрос;
                                if (Запрос.Свойство("ОбратныйЗапрос"))
                                { // возвращаем результат
                                    var ОбратныйЗапрос = Запрос.ОбратныйЗапрос as Структура;
                                    var Контроллер = Контроллеры.Получить(структЗадача.Запрос.ИдПроцесса) as Структура;
                                    if (!(Контроллер == Неопределено))
                                    {
                                        ОбратныйЗапрос.Вставить("РезультатДанные", Структура.Новый("Ответ, Результат", структЗадача.Ответ, структЗадача.Результат));
                                        структЗадача.Вставить("Соединение", ПередатьДанные(Контроллер.Получить<string>("Хост"), Контроллер.Получить<int>("Порт"), ОбратныйЗапрос));
                                        if (структЗадача.Соединение == Неопределено)
                                        {
                                            Сообщить("dataserver: Ошибка передачи результатов");
                                        }
                                        else
                                        {
                                            //структЗадача.Этап = "Вернуть";
                                        }
                                    }
                                }
                            }
                            catch (Exception e)
                            {
                                Сообщить(ОписаниеОшибки(e));
                            }
                            структЗадача.Результат = null;
                        }

                        if (Строка(структЗадача.Ответ) == "ЗапросПриостановлен" || Строка(структЗадача.Ответ) == "ЗапросВыполняется")
                            структЗадача.Этап = "Приостановлен";
                        else if (ЕстьРезультат != null)
                            структЗадача.Этап = "Удалить";

                    }

                    if (структЗадача.Этап == "Удалить")
                    {
                        Сообщить("dataserver <- taskid=" + структЗадача.ИдЗадачи + " time=" + (ТекущаяУниверсальнаяДатаВМиллисекундах() - (decimal)структЗадача.ВремяНачало) + Загрузка);
                        Задачи.Удалить(структЗадача.ИдЗадачи);
                        continue;
                    }

                    //Сообщить("dataserver: всего задач " + Задачи.Количество());

                    мЗадачи.Добавить(структЗадача);

                }

                Соединение = TCPСервер.ПолучитьСоединение(Таймаут);
                if (!(Соединение == Неопределено))
                {
                    Соединения.Добавить(Соединение);
                    Таймаут = 5;
                }

                к = Соединения.Количество();
                while (к > 0)
                {
                    к = к - 1;
                    Соединение = Соединения.Получить(0) as TCPСоединение;
                    Соединения.Удалить(0);

                    if (Соединение.Статус == "Данные")
                    {
                        Структура Запрос = null;

                        try
                        {
                            Запрос = null;
                            Запрос = new Запрос(ДвоичныеДанныеВСтруктуру(Соединение.ПолучитьДвоичныеДанные()) as Структура);
                            Таймаут = 5;
                        }
                        catch (Exception e)
                        {
                            Сообщить("dataserver: " + ОписаниеОшибки(e));
                        }

                        if (Запрос == Неопределено)
                        {
                            continue;
                        }

                        if (!(Запрос == Неопределено))
                        {
                            Задача структЗадача = new Задача("ИдЗадачи, Этап, Запрос, Ответ, Результат, ВремяНачало, ВремяСоздания", ПолучитьИД(), "Выполнить", Запрос, "", Неопределено, ТекущаяУниверсальнаяДатаВМиллисекундах(), ТекущаяДата());
                            //Сообщить("Задача " + структЗадача.ИдЗадачи);
                            Задачи.Вставить(структЗадача.ИдЗадачи, структЗадача);
                            мЗадачи.Добавить(структЗадача);
                            //Сообщить("dataserver: всего задач " + Задачи.Количество());
                        }

                        //Соединение.Закрыть();
                        //continue;

                    }
                    else if (Соединение.Статус == "Ошибка")
                    {

                        Соединение.Закрыть();
                        continue;

                    }

                    Соединения.Добавить(Соединение);

                }

                ОбработатьДанные();

                к = ДанныеОбновить.Количество();
                while (к > 0)
                {
                    к = к - 1;
                    var Данные = ДанныеОбновить.Получить(0) as treedata;
                    ДанныеОбновить.Удалить(0);

                    Данные.ОбновитьПредставление();
                    if (Данные.Представление != "")
                    {
                        var Процессы = ПолучитьВложение(ЧьиДанные, Данные);
                        foreach(КлючИЗначение элПроцесс in Процессы)
                        {
                            var Контроллер = элПроцесс.Значение as Структура;
                            if (!(Контроллер == Неопределено))
                            {
                                var Запрос = Структура.Новый("ИстДанных, ИмяДанных, Представление, cmd", Данные.ИстДанных, Данные.ИмяДанных, Данные.Представление, "ДанныеОбновить");
                                if (ПередатьДанные(Контроллер.Получить<string>("Хост"), Контроллер.Получить<int>("Порт"), Запрос) == Неопределено)
                                {
                                    Сообщить("dataserver: Ошибка передачи результатов");
                                }
                            }
                        }
                        Данные.Представление = "";
                    }

                    if (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла > 100) break;
                }

                var ВремяЦикла = ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоЦикла;
                if (ВремяЦикла > 100)
                {
                    Сообщить("!dataserver ВремяЦикла=" + ВремяЦикла);
                }
                if (Таймаут < 50)
                {
                    Таймаут = Таймаут + 1;
                }

                //Сообщить(ВремяЦикла);

            }

            TCPСервер.Остановить();

        }


        public void Main()
        {
            ОбработатьСоединения();
        }

        public string get_procid()
        {
            //throw new NotImplementedException();
            return "";
        }

        public string ПолучитьСубъект()
        {
            //throw new NotImplementedException();
            return "";
        }

        public void ЗаписатьСобытие(string стрЗаголовок, string стрСообщение, int ТипСобытия = 0, string ПараметрКоманда = "")
        {
            //throw new NotImplementedException();
        }

        public object ПолучитьБиблиотеку(string ИмяБиблиотеки, string Версия = "")
        {
            if (!(Версия == ""))
            {
                ИмяБиблиотеки = ОбъединитьПути(ИмяБиблиотеки, ИмяБиблиотеки + "-" + Версия);
            }
            var Библиотека = Библиотеки.Получить(ИмяБиблиотеки);
            if (Библиотека == Неопределено)
            {
                switch (ИмяБиблиотеки)
                {
                    case "Объекты":
                        Библиотека = new Объекты();
                        break;
                    case "Функции":
                        Библиотека = new Функции();
                        break;
                    case "Операторы":
                        Библиотека = new Операторы();
                        break;
                    case "Сем":
                        Библиотека = new Сем();
                        break;
                    case "parser":
                        Библиотека = new parser();
                        break;
                    case "tracer":
                        Библиотека = new tracer();
                        break;
                    default:
                        break;
                }
                if (Библиотека == Неопределено)
                {
                    ВызватьИсключение("Библиотека " + ИмяБиблиотеки + " не найдена");
                }
                Библиотеки.Вставить(ИмяБиблиотеки, Библиотека);
            }
            return Библиотека;
        } // ПолучитьБиблиотеку()


        public Структура НоваяЗадача(Структура Запрос, string Тип = "Запрос", object ЗадачаВладелец = null)
        {
            //throw new NotImplementedException();
            return null;
        }

        public object ПередатьДанныеД(Структура стрДанные)
        {
            //throw new NotImplementedException();
            return null;
        }
    }

}
