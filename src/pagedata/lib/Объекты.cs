// MIT License
// Copyright (c) 2020 vasvl123
// https://github.com/vasvl123/useyourmind

using System;

namespace onesharp.lib
{
	public class Объекты : Onesharp
	{

		public Объекты() : base("Объекты") {}

		public object УзелСвойство(Структура Узел, string Свойство)
		{
			object УзелСвойство = null;
			if (!(Узел == Неопределено))
			{
				Узел.Свойство(Свойство, out УзелСвойство);
			}
			return УзелСвойство;
		} // УзелСвойство(Узел)


		public Узел ИмяЗначение(string Имя = "", object _Значение = null)
		{
			var Значение = (_Значение is null) ? "" : _Значение;
			return Узел.Новый("Имя, Значение", Имя, Значение);
		}

        public void ОбработатьОтвет(string Действие, pagedata Данные, Узел Свойства, object Результат)
        {

            if (Действие == "ВнешниеДанные")
            {
                if (!(Результат == Неопределено))
                {
                    Свойства.д("Ответ").Значение = Результат;
                }
            }

            Данные.ОбъектыОбновитьДобавить(Свойства.Родитель);
            Свойства.Родитель.п.Вставить("Обновить", Неопределено);

        }

		public string НоваяФорма(string Имя)
		{
			var ткст =
			@"
			|Форма.
			|	name: '+Имя+' 
			|	form: 'box'
			|	role: 'thing'
			|	movable: true
			|	color: 0x555555
			|	transparent: true
			|	opacity: 0.3
			|	position_x: 0
			|	position_y: 0
			|	position_z: 0
			|	scale_x: 2
			|	scale_z: 2
			";
			ткст = Стр.Заменить(ткст, "+Имя+", Имя);
			return ткст;
		} // НоваяФорма()


		public string Субъект_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст = 
			@"
			|События
			|+НоваяФорма+
			|	camera_x: 0
			|	camera_y: 50
			|	camera_z: 100
			|	role: 'player'
			";
			ткст = Стр.Заменить(ткст, "+НоваяФорма+", НоваяФорма("Субъект"));
			return ткст;
		}


		public string Предмет_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст = 
			@"
			|События
			|+НоваяФорма+
			";
			ткст = Стр.Заменить(ткст, "+НоваяФорма+", НоваяФорма("Предмет"));
			return ткст;
		}


		public string Комната_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст =
			@"
			|События
			|+НоваяФорма+
			|	role: 'room'
			|	movable: false
			";
			ткст = Стр.Заменить(ткст, "+НоваяФорма+", НоваяФорма("Комната"));
			return ткст;
		}


		public string Кнопка_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст =
			@"
			|События
			|Текст
			|Вид
			|	button	class=btn btn - primary	onclick=addcmd(this); return false	type=button
			|		Значение: Текст
			";
			return ткст;
		}


		public string Надпись_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст = 
			@"
			|События
			|Текст
			|Вид
			";
			return ткст;
		}


		public string Задача_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст = 
			@"
			|События
			|Условие
			|Параметры.
			|Вид
			";
			return ткст;
		}

		public void Задача_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
		{
            var Условие = Данные.ЗначениеУзла(Свойства.д("Условие")) as bool?;
			if (!(Изменения.Получить(Свойства.Родитель) as bool? == Истина))
			{
                if (Изменения.Получить(Свойства.д("Условие")) as bool? == Истина)
				{
					if (Условие == Истина)
					{
						var Параметры = Новый.Структура();
                        var пУзел = Свойства.Дочерний;
                        while (пУзел != null)
						{
                            Параметры.Вставить(пУзел.Имя as string, Данные.ЗначениеУзла(пУзел));
                            пУзел = пУзел.Соседний;
						}
						Данные.Процесс.НоваяЗадача(Параметры, "Служебный");
					}
				}
			}
		}


		// Выполнить
		public string Выполнить_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст = 
			@"
			|События
			|Условие
			|Тогда
			|Иначе
			|Результат
			";
			return ткст;
		}

		public void Выполнить_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
		{
			var Инициализация = (Изменения.Получить(Свойства.Родитель) as bool? == Истина);
            if (Инициализация || Изменения.Получить(Свойства.д("Условие")) as bool? == Истина)
			{
				object Результат;
                var Условие = Данные.ЗначениеУзла(Свойства.д("Условие")) as bool?;
				if (Условие == Истина)
				{
                    Результат = Данные.ЗначениеУзла(Свойства.д("Тогда"));
				}
				else
				{
                    Результат = Данные.ЗначениеУзла(Свойства.д("Иначе"));
				}
                Данные.НовоеЗначениеУзла(Свойства.д("Результат"), ИмяЗначение(ТипЗнч(Результат), Результат), Истина);
                Изменения.Вставить(Свойства.д("Результат"), Истина);
			}

		}


		public string ИсточникДанных_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст =
			@"
			|События
			|ЗапросДанных.
			|	БазаДанных
			|	УсловияОтбора
			|	Обновление: Авто
			|	ЧислоЗаписей: 10
			|	СписокПолей.
			|	Команда: НайтиЗаголовок
			|	Задача
			|Результат
			|Записи.
			";
			return ткст;
		}

		public void ИсточникДанных_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
		{
			var Инициализация = (Изменения.Получить(Свойства.Родитель) as bool? == Истина);
            var НовыйЗапрос = Инициализация || (Изменения.Получить(Свойства.д("ЗапросДанных").д("БазаДанных")) as bool? == Истина);
            НовыйЗапрос = НовыйЗапрос || (Изменения.Получить(Свойства.д("ЗапросДанных")) as bool? == Истина);

			if (Инициализация)
			{
                Данные.НовыйДочерний(Свойства.д("ЗапросДанных"), ИмяЗначение("Направление"), Истина, Истина);
                Данные.НовыйДочерний(Свойства.д("ЗапросДанных"), ИмяЗначение("НачальнаяПозиция"), Истина, Истина);
                Данные.НовыйДочерний(Свойства.д("ЗапросДанных"), ИмяЗначение("КонечнаяПозиция"), Истина, Истина);
			}

			if (НовыйЗапрос)
			{
                var БазаДанных = Данные.ЗначениеУзла(Свойства.д("ЗапросДанных").д("БазаДанных"));
                var сЗадача = Данные.ЗначениеУзла(Свойства.д("ЗапросДанных").д("Задача"));
				if (ЗначениеЗаполнено(сЗадача))
				{
					// завершить задачу
					var Параметры = Структура.Новый("сЗадача, cmd", сЗадача, "ЗавершитьЗадачу");
					Данные.Процесс.НоваяЗадача(Параметры, "Служебный");
				}
				//Если БазаДанныхИзменена Тогда // очистить записи
                var кУзел = Свойства.д("Записи").Дочерний;
				while (!(кУзел == Неопределено))
				{
					кУзел.Значение = Данные.Пустой;
					Изменения.Вставить(кУзел, Истина);
					кУзел = кУзел.Соседний;
				}
				//КонецЕсли;
                var Запрос = Структура.Новый("Данные, Свойства, ЗапросДанных, cmd", Данные, Свойства, Данные.СвойстваВСтуктуру(Свойства.д("ЗапросДанных")), "ЗапросДанных");
				var ИдЗадачи = Данные.Процесс.НоваяЗадача(Запрос, "Служебный").с.ИдЗадачи;
                Данные.НовоеЗначениеУзла(Свойства.д("ЗапросДанных").д("Задача"), ИмяЗначение("Строка", ИдЗадачи), Истина);
				//Изменения.Вставить(Свойства.д.ЗапросДанных.д.Задача, Истина);
			}

            if (Изменения.Получить(Свойства.д("Результат")) as bool? == Истина)
			{
                Узел дУзел = Свойства.д("Результат").Дочерний;
				while (!(дУзел == Неопределено))
				{
					var ЗапросДанные = дУзел.Значение as Структура;
					var ИмяЗаписи = "з" + ЗапросДанные.с.Позиция;
                    Узел Запись = Свойства.д("Записи").д(ИмяЗаписи);
					if (!(Запись == Неопределено))
					{
						Запись.Значение = ЗапросДанные.с.Заголовок;
						Изменения.Вставить(Запись, Истина);
					}
					else
					{
						Запись = Узел.Новый("Имя, Значение", "з" + ЗапросДанные.с.Позиция, ЗапросДанные.с.Заголовок);
                        var кУзел = Данные.НовыйДочерний(Свойства.д("Записи"), Запись, Истина, Истина);
					}
					дУзел = дУзел.Соседний;
				}
				// удалить результаты
                дУзел = Свойства.д("Результат").Дочерний;
				if (!(дУзел == Неопределено))
				{
					Данные.УдалитьУзел(дУзел, Истина, Истина);
				}
                Изменения.Вставить(Свойства.д("Записи"), Истина);
			}

		}

		public string ПанельДанных_Кнопка(int Начало, string Позиция)
		{
			var ткст =
			@"
			|*button	class=btn btn-light btn-sm	А=ПриНажатии	type=button	role=pos	pos=" + Позиция + @"
			|	Строка: " + Начало;

			return ткст;
		} ///

		// Панель данных
		public string ПанельДанных_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст =
			@"
			|События
			|ИсточникДанных
			|Количество: 10
			|Направление: Назад
			|*Начало
			|*кПозиция
			|*Страницы.
			|*Вид
			|	div
			|		div	class=btn-group
			|			button	class=btn btn-light btn-sm	А=ПриНажатии	type=button	role=bck
			|				Строка: +
			|			З: Страницы
			|			button	class=btn btn-light btn-sm	А=ПриНажатии	type=button	role=pos	pos=
			|				Строка: 0
			";
			return ткст;
		}

		public void ПанельДанных_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
		{

            var ИсточникДанных = Данные.ЗначениеУзла(Свойства.д("ИсточникДанных")) as Узел;
			var Инициализация = (Изменения.Получить(Свойства.Родитель) as bool? == Истина);

			// Конструктор
			if (Инициализация)
			{
                ИсточникДанных.п.Получить<Узел>("Свойства").д("ЗапросДанных").д("ЧислоЗаписей").Значение = Свойства.д("Количество").Значение;
				//ИсточникДанных.Свойства.д.ЗапросДанных.д.Направление.Значение = Свойства.д.Направление.Значение;
			}

            if (Изменения.Получить(Свойства.д("События")) as bool? == Истина)
			{
                var дУзел = Свойства.д("События").Дочерний;
				if (!(дУзел == Неопределено))
				{
                    var мСобытие = Стр.Разделить(дУзел.Значение as string, Символы.Таб);
					var Узел = Данные.ПолучитьУзел(мСобытие[1]);
					if (!(Узел == Неопределено))
					{
                        var кПозиция = Свойства.д("кПозиция").Значение.ToString();
                        var икПозиция = ИсточникДанных.п.Получить<Узел>("Свойства").д("ЗапросДанных").д("КонечнаяПозиция").Значение.ToString();
						if (кПозиция == "" || (int)Число(икПозиция) < (int)Число(кПозиция))
						{
							кПозиция = икПозиция;
						}
						var Роль = "" + Данные.НайтиАтрибут(Узел, "role").Значение;
						if (Роль == "pos")
						{
							var Позиция = "" + Данные.НайтиАтрибут(Узел, "pos").Значение;
							ИсточникДанных.п.Получить<Узел>("Свойства").д("ЗапросДанных").д("НачальнаяПозиция").Значение = Позиция;
						}
						else
						{
							var Количество = (int)Число(Свойства.д("Количество").Значение);
							var Начало = Свойства.д("Начало").Значение;
                            if (!ЗначениеЗаполнено(Начало))
							{
								Начало = 0;
							}
							else
							{
								Начало = Число(Начало);
							}
                            if (Роль == "bck")
                            {
                                ИсточникДанных.п.Получить<Узел>("Свойства").д("ЗапросДанных").д("НачальнаяПозиция").Значение = кПозиция;
                                Начало = (int)Начало + Количество;
                                Свойства.д("Начало").Значение = "" + Начало;
                            }
							Данные.СоздатьСвойства(Свойства.д("Страницы"), ПанельДанных_Кнопка((int)Начало, кПозиция), Истина, Ложь);
						}
						Свойства.д("кПозиция").Значение = кПозиция;
					}
					ИсточникДанных.п.Получить<Соответствие>("Изменения").Вставить(ИсточникДанных.п.Получить<Узел>("Свойства").д("ЗапросДанных"), Истина);
					Данные.ОбъектыОбновить.Добавить(ИсточникДанных);
				}
				Данные.УдалитьУзел(дУзел, Истина, Истина);
				Изменения.Вставить(Свойства.д("События"), Истина);
			}
		}

		// Таблица

		public string Таблица_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст =
			@"
			|События
			|СвойстваСтроки.
			|СписокПолей.
			|ИсточникСтрок
			|Вид
			";
			return ткст;
		}

		public void Таблица_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
		{

			var Инициализация = (Изменения.Получить(Свойства.Родитель) as bool? == Истина);
			var ИсточникСтрокИзменен = (Изменения.Получить(Свойства.д("ИсточникСтрок")) as bool? == Истина);

			var УзелЗаголовок = Свойства.Соседний;

			// Конструктор
			if (Инициализация)
			{
				if (УзелЗаголовок == Неопределено)
				{ // создать заголовок
					УзелЗаголовок = Данные.НовыйСоседний(Свойства, ИмяЗначение("thread", ""), Истина);
					var Узел = Данные.НовыйДочерний(УзелЗаголовок, ИмяЗначение("tr", ""), Истина);
                    var элПоле = Свойства.д("СписокПолей").Дочерний;
                    while (элПоле != null)
					{
						Узел Поле = элПоле.Значение as Узел;
						var стрУзел = ИмяЗначение("th", Данные.ЗначениеУзла(Поле.д("Заголовок")));
						Данные.НовыйДочерний(Узел, стрУзел, Истина, Истина);
                        элПоле = элПоле.Соседний;
					}
				}
			}

			var ИсточникСтрок = Данные.ЗначениеУзла(Свойства.д("ИсточникСтрок")) as Узел;

			if (ИсточникСтрокИзменен)
			{
				var Строки = Соответствие.Новый();
				var УзелСтроки = Свойства;
				УзелЗаголовок = УзелСтроки.Соседний;
				while (!(УзелЗаголовок == Неопределено))
				{
					УзелСтроки = УзелЗаголовок;
					Строки.Вставить(УзелСтроки.Значение, "");
					УзелЗаголовок = УзелЗаголовок.Соседний;
				}
				// добавить строки
				if (!(ИсточникСтрок == Неопределено))
				{
                    ИсточникСтрок = ИсточникСтрок.Дочерний;
					while (!(ИсточникСтрок == Неопределено))
					{
						var ИмяСтроки = "СтрокаТаблицы " + ИсточникСтрок.Имя;
						var оСтрока = Строки.Получить(ИмяСтроки);
						if (оСтрока == Неопределено)
						{
							УзелСтроки = Данные.НовыйСоседний(УзелСтроки, ИмяЗначение("О", ИмяСтроки), Истина);
							var СвойстваСтроки = Данные.ОбработатьОбъект(УзелСтроки, Истина) as Узел;
							// дополнительные свойства
							if (Свойства.д("СвойстваСтроки") != null)
							{
								Узел стСвойстваСтроки = null;
								Узел Узел = СвойстваСтроки.Дочерний;
								while (!(Узел == Неопределено))
								{
									стСвойстваСтроки = Узел;
									Узел = Узел.Соседний;
								}
                                var элСвойство = Свойства.д("СвойстваСтроки").Дочерний;
                                while (элСвойство != null)
								{
									var свУзел = Данные.КопироватьВетку(элСвойство.Значение as Узел, Данные.ЭтотОбъект, стСвойстваСтроки, СвойстваСтроки);
									стСвойстваСтроки = Данные.НовыйСоседний(стСвойстваСтроки, свУзел, Истина);
                                    элСвойство = элСвойство.Соседний;
                                }
							}
							Данные.НовоеЗначениеУзла(СвойстваСтроки.д("Источник"), ИмяЗначение("С", "у " + ИсточникСтрок.Код), Истина);
							var сУзел = Данные.НовыйДочерний(Свойства.д("Вид").Дочерний, ИмяЗначение("tr", ""), Истина, Истина);
							Данные.НовыйДочерний(сУзел, ИмяЗначение("З", "у " + СвойстваСтроки.д("Поля").Код), Истина, Истина);
						}
                        ИсточникСтрок = ИсточникСтрок.Соседний;
					}
				}
			}
		}

		// СтрокаТаблицы
		public string СтрокаТаблицы_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст =
			@"
			|События
			|Источник
			|Поля
			";
			return ткст;
		}

		public void СтрокаТаблицы_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
		{

			var Инициализация = (Изменения.Получить(Свойства.Родитель) as bool? == Истина);
			var ИсточникИзменен = (Изменения.Получить(Свойства.д("Источник")) as bool? == Истина);

			if (ИсточникИзменен)
			{
				// удалить прежние поля
				var сУзел = Свойства.д("Поля").Дочерний;
				if (!(сУзел == Неопределено))
				{
					Данные.УдалитьУзел(сУзел, Истина, Истина);
				}
			}

			// Конструктор
			if (Инициализация || ИсточникИзменен)
			{
				var оУзел = Свойства.Родитель;
				var Источник = Данные.ЗначениеУзла(Свойства.д("Источник")) as Узел; // получить узел по ссылке
				if (!(Источник.Значение == Данные.Пустой))
				{
					var Узел = Свойства.д("Поля");
                    var элПоле = оУзел.Родитель.п.Получить<Узел>("Свойства").д("СписокПолей").Дочерний;
					while (элПоле != null)
                    {
						Узел свПоле = элПоле.Значение as Узел;
						Узел стрУзел = null;
						var Шаблон = свПоле.д("Шаблон");
						if (!(Шаблон == Неопределено))
						{
							стрУзел = Данные.КопироватьВетку(Шаблон.Дочерний, Данные.ЭтотОбъект, Узел, Свойства.д("Поля"));
						}
						else
						{
							var Поле = элПоле.Имя;
							var ПолеЗначение = Источник.п.Получить<Структура>("Значение")["Поле"] as string;
							стрУзел = ИмяЗначение("td", ПолеЗначение);
						}
						Узел = Данные.НовыйДочерний(Свойства.д("Поля"), стрУзел, Истина, Истина);
                        элПоле = элПоле.Соседний;
                    }
				}
				Данные.ОбъектыОбновитьДобавить(оУзел.Родитель); // обновить таблицу
			}

		}


		public string Загрузить_Свойства(pagedata Данные, Узел оУзел)
		{
			var ткст =
			@"
			|События
			|Файл
			|Сохранен
			";
			return ткст;
		}


		public void Загрузить_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
		{

			if (Изменения.Получить(Свойства.д("События")) as bool? == Истина)
			{

				Узел дУзел = Свойства.д("События").Дочерний;
				if (!(дУзел == Неопределено))
				{
					var мСобытие = Стр.Разделить(дУзел.Значение as string, Символы.Таб);
					if (мСобытие[0] == "ПриОтправке")
					{
						if (дУзел.п.Получить<Структура>("Параметры").Свойство("filename", out var _filename))
						{
                            string[] расш = Стр.Разделить(_filename as string, ".");
                            var уФайл = Свойства.д("Файл") as Узел;
                            уФайл.Значение = "" + Цел(Данные.Процесс.ПолучитьИД()) + "." + расш[расш.Length - 1];
							Данные.Процесс.ПередатьДанныеД(Структура.Новый("ИстДанных, БазаДанных, Заголовок, Команда, дДанные, неОбратныйЗапрос", Данные.Процесс.ПолучитьСубъект(), "inbox", Структура.Новый("ИмяДанных, ТипДанных", Свойства.д("Файл").Значение, 2), "ЗаписатьДанные", дУзел.п.Получить<Структура>("Параметры")["fl"], Неопределено));
						}
						Изменения.Вставить(Свойства.д("Файл"), Истина);
					}
					Данные.УдалитьУзел(дУзел);
				}

			}
		}



        public string ВнешниеДанные_Свойства(pagedata Данные, Узел оУзел)
        {
            object Свойства = null;
            var шСвойства = "";

            if (!оУзел.п.Свойство("Свойства", out Свойства))
            { // новый объект
                Свойства = Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
            }

            шСвойства = @"
            |*События
            |*ПараметрыЗапроса.
            |	Дата
            |*зФорма
            |	div
            |		div	class=btn-group
            |			button	class=btn btn-primary btn-sm	А=ПриНажатии	type=button	role=send
            |				Строка: Сформировать отчет
            |*Ответ: Нажмите Сформировать отчет
            |*Вид
            |	З: зФорма
            |	br
            |	З: Ответ
            ";

            Данные.СоздатьСвойства(Свойства as Узел, шСвойства, "Только");
            оУзел.п.Вставить("Свойства", Свойства);

            return null;

        }

        public void ВнешниеДанные_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
        {

            var оУзел = Свойства.Родитель;

            // обработать события
            if (Изменения.Получить(Свойства.д("События")) as bool? == Истина)
            {
                var дУзел = Свойства.д("События").Дочерний as Узел;
                if (!(дУзел is null))
                {
                    var мСобытие = Стр.Разделить(дУзел.Значение as string, Символы.Таб);
                    var тСобытие = мСобытие[0];
                    if (тСобытие == "ПриНажатии")
                    {
                        var сУзел = Данные.ПолучитьУзел(мСобытие[1]);

                        var ЗначениеКнопка = дУзел.п["Параметры"] as string;
                        if (!(ЗначениеКнопка is null))
                        {

                            if (ЗначениеКнопка == "send")
                            {

                                var Запрос = Структура.Новый("Библиотека, Данные, Параметры, Свойства, cmd", this, Данные, "", Свойства, "ВнешниеДанные");
                                Данные.Процесс.НоваяЗадача(Запрос, "Служебный");
                                
                                Свойства.д("Ответ").Значение = "Подождите ...";
                                Данные.ОбъектыОбновитьДобавить(Свойства.Родитель);
                                Свойства.Родитель.п.Вставить("Обновить", Неопределено);

                            }
                        }
                    }
                }
            }

        }



    }
}