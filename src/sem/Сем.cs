// MIT License
// Copyright (c) 2021 vasvl123
// https://github.com/vasvl123/onesharp.net


namespace onesharp.lib
{
    public class Сем : Onesharp
    {
        public Сем() : base("Сем") { }

        Узел Формы;

        public object УзелСвойство(Структура Узел, string Свойство)
        {
            object УзелСвойство = null;
            if (!(Узел == Неопределено))
            {
                Узел.Свойство(Свойство, out УзелСвойство);
            }
            return УзелСвойство;
        } // УзелСвойство(Узел)

        public Узел ИмяЗначение(string Имя = "", object _Значение = null)
        {
            var Значение = (_Значение is null) ? "" : _Значение;
            return Узел.Новый("Имя, Значение", Имя, Значение);
        }

        public void ОбработатьОтвет(string Действие, pagedata Данные, Узел Свойства, Структура Результат)
        {

            if (Действие == "ФормыСлов")
            {
                if (!(Результат == Неопределено))
                {
                    var служ = Данные.Служебный(Формы);
                    foreach (КлючИЗначение Вариант in Результат)
                    {
                        var вЗначение = Вариант.Значение as Структура;
                        var ф = Формы.п.с.сл.Получить(вЗначение.с.Слово);
                        if (ф == Неопределено)
                        {
                            ф = Формы.п.с.сл.Получить(Стр.Заменить(вЗначение.с.Слово, "Ё", "Е"));
                            if (ф == Неопределено)
                            {
                                continue;
                            }
                        }
                        string[] мРез = Стр.Разделить(вЗначение.с.Результат, Символы.ПС);
                        foreach (var Рез in мРез)
                        {
                            if (!(Рез == ""))
                            {
                                var мФорм = Стр.Разделить(Рез, Символы.Таб);
                                var ф0 = мФорм[0];
                                var ф1 = мФорм[1];
                                //if (ф1 == "PREP" || ф1 == "PRCL" || ф1 == "PNCT" || ф1 == "CONJ" || ф1 == "ADVB")
                                //{
                                //    ф1 = ф1 + " " + ф0;
                                //}
                                var Запись = ИмяЗначение(ф0, ф1);
                                var у = Данные.НовыйДочерний(ф, Запись, служ, Истина); // Добавить форму
                                if (мФорм.Length > 2)
                                {
                                    Данные.НовыйАтрибут(у, ИмяЗначение(мФорм[2], мФорм[3]), служ);
                                }
                            }
                        }
                    }
                }
                if (Свойства == Неопределено) return;
                Свойства.д.с.Разбор.Значение = "Токены";

            }
            else if (Действие == "Грамматики")
            {
                if (!(Свойства.Свойство("Грамматики")))
                {
                    Массив мгр = Результат.с.гр;
                    var сгр = Новый.Соответствие();
                    foreach (Структура гр in мгр) {
                        string кл = "" + (int)гр.с.т1 + "_" + (int)гр.с.т2;
                        var м = сгр.Получить(кл) as Массив;
                        if (м is null) м = Новый.Массив();
                        м.Добавить(гр);
                        сгр.Вставить(кл, м);
                    }
                    Свойства.Вставить("Грамматики", сгр);
                }
                //if (!(Свойства.Свойство("Связи")))
                //{
                //    Свойства.Вставить("Связи", Соответствие.Новый());
                //}
                Свойства.д.с.Разбор.Значение = "Привязать";

            }
            else if (Действие == "Элемент")
            {

                Свойства.д.с.Номер.Значение = Результат.с.Строка;
                Результат.Удалить("Элемент");
                Свойства.Вставить("Элементы", Результат.с.Элементы);

            }

            Данные.ОбъектыОбновитьДобавить(Свойства.Родитель);
            Свойства.Родитель.Вставить("Обновить", Неопределено);

        }


        public string Корень_Свойства(pagedata Данные, Узел оУзел)
        {

            if (!(оУзел.Свойство("Свойства")))
            { // новый объект
                var Свойства = Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
                оУзел.Вставить("Свойства", Свойства);
            }
            if (оУзел.с.Свойства.Дочерний == Неопределено)
            {
                var шСвойства = @"
                |*Формы
                |*Вид
                |	div	class=card mb-3 col-lg-7	style=background-color:rgba(255,255,255,0.3); min-height:20rem
                |		div class=card-body
                |			h4: Semantic analysis 
                |			П: Содержимое
                ";
                Данные.СоздатьСвойства(оУзел.с.Свойства, шСвойства, "Только");
            }
            if (Формы == Неопределено)
            { // формы слов
                Формы = оУзел.с.Свойства.д.с.Формы;
                Формы.Вставить("п", Новый.Структура());
                Формы.п.Вставить("сл", Соответствие.Новый());
                var фУзел = Формы.Дочерний;
                while (!(фУзел == Неопределено))
                {
                    Формы.п.с.сл.Вставить(фУзел.Имя, фУзел);
                    фУзел = фУзел.Соседний;
                }
            }

            return null;
        } // Корень_Свойства()


        public string Элемент_Свойства(pagedata Данные, Узел оУзел)
        {

            var Свойства = оУзел.Дочерний;
            if (Свойства == Неопределено)
            { // новый объект
                Свойства = Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
            }

            var шСвойства = @"
            |*События
            |*Показать: Нет
            |*Номер
            |*Элемент
            |*Кнопка
            |*Вид
            |	З: Кнопка
            |	: Если
            |		З: Показать
            |		ul
            |			П: Содержимое
            |";

            Данные.СоздатьСвойства(Свойства, шСвойства, "Только");
            оУзел.Вставить("Свойства", Свойства);

            // получить элемент справочника
            var Запрос = Структура.Новый("Библиотека, Данные, Параметры, Свойства, cmd", this, Данные, Структура.Новый("Позиция, База, Действие", Свойства.д.с.Позиция.Значение, Свойства.д.с.База.Значение, "Элемент"), Свойства, "Морфология");
            Данные.Процесс.НоваяЗадача(Запрос, "Служебный");

            return null;
        }


        public void Элемент_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
        {

            var оУзел = Свойства.Родитель;

            // обработать события
            if (Изменения.Получить(Свойства.д.с.События) == Истина)
            {
                var дУзел = Свойства.д.с.События.Дочерний as Узел;
                if (!(дУзел == Неопределено))
                {
                    var мСобытие = Стр.Разделить(дУзел.Значение as string, Символы.Таб);
                    var тСобытие = мСобытие[0];
                    if (тСобытие == "ПриНажатии")
                    {
                        if (Свойства.д.с.Показать.Значение == "Да")
                        {
                            Свойства.д.с.Показать.Значение = "Нет";
                        }
                        else
                        {
                            Свойства.д.с.Показать.Значение = "Да";
                        }
                    }
                }
                Данные.УдалитьУзел(дУзел);
                Изменения.Вставить(Свойства.д.с.События, Истина);
            }

            if (Свойства.д.с.Показать.Значение == "Да")
            {
                if (Свойства.Свойство("Элементы"))
                {
                    var д = Свойства;
                    var н = 1;
                    foreach (int зн in Свойства.с.Элементы as Массив)
                    {
                        д = Данные.НовыйСоседний(д, ИмяЗначение("О", "Сем.Элемент"), Истина);
                        Данные.НовыйАтрибут(д, ИмяЗначение("Позиция", зн), Истина);
                        Данные.НовыйАтрибут(д, ИмяЗначение("База", Свойства.д.с.База.Значение), Истина);
                        н = н + 1;
                    }
                    Свойства.Удалить("Элементы");
                }
            }

            if (Свойства.д.с.Элемент.Значение == "")
            {
                Свойства.д.с.Элемент.Значение = Свойства.д.с.Номер.Значение;
            }

            // сформировать представление
            var ш = "<button id='_" + оУзел.Код + "' type='button' class='text-left btn1 btn-secondary' onclick='addcmd(this,event); return false' role='sent'>.текст</button>";
            var см = (Свойства.д.с.Показать.Значение == "Нет") ? "&#9655;" : "&#9661;";
            var Вид = Стр.Заменить(ш, ".текст", см);
            Вид = "<div class='btn-group' role='group'>" + Вид + Стр.Заменить(ш, ".текст", Свойства.д.с.Элемент.Значение) + "</div>";

            Свойства.д.с.Кнопка.Значение = Вид;

        }


        public string Страница_Свойства(pagedata Данные, Узел оУзел)
        {

            //Если НЕ оУзел.Свойство("Свойства") Тогда // новый объект
            var Свойства = оУзел.Дочерний; //Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
            var шСвойства = @"
            |*События
            |*Показать: Нет
            |*Кнопка
            |*Вид
            |	З: Кнопка
            |	: Если
            |		З: Показать
            |		П: Содержимое
            |";

            Данные.СоздатьСвойства(Свойства, шСвойства);
            оУзел.Вставить("Свойства", Свойства);
            //КонецЕсли;

            return null;
        }


        public void Страница_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
        {

            var оУзел = Свойства.Родитель;

            // обработать события
            if (Изменения.Получить(Свойства.д.с.События) == Истина)
            {
                var дУзел = Свойства.д.с.События.Дочерний as Узел;
                if (!(дУзел == Неопределено))
                {
                    var мСобытие = Стр.Разделить(дУзел.Значение as string, Символы.Таб);
                    var тСобытие = мСобытие[0];
                    if (тСобытие == "ПриНажатии")
                    {
                        if (Свойства.д.с.Показать.Значение == "Да")
                        {
                            Свойства.д.с.Показать.Значение = "Нет";
                        }
                        else
                        {
                            Свойства.д.с.Показать.Значение = "Да";
                        }
                    }
                }
                Данные.УдалитьУзел(дУзел);
                Изменения.Вставить(Свойства.д.с.События, Истина);
            }

            // сформировать представление
            var ш = "<button id='_" + оУзел.Код + "' type='button' class='text-left btn1 btn-primary' onclick='addcmd(this,event); return false' role='sent'>.текст</button>";
            var см = (Свойства.д.с.Показать.Значение == "Нет") ? "&#9655;" : "&#9661;";
            var Вид = Стр.Заменить(ш, ".текст", см);
            Вид = "<div class='btn-group' role='group'>" + Вид + Стр.Заменить(ш, ".текст", Свойства.д.с.Номер.Значение) + "</div>";

            Свойства.д.с.Кнопка.Значение = Вид;

        }

        Массив свФормы(pagedata Данные, string св)
        {
            var мнф = Новый.Массив();
            var служ = Данные.Служебный(Формы);
            var м = Стр.Разделить(св, " ");
            var мсл = "";
            var мф = Новый.Массив();
            foreach (var сл in м)
            {
                if (!(сл == ""))
                {
                    var всл = ВРег(сл);
                    var нф = Формы.п.с.сл.Получить(всл);
                    if (нф == Неопределено)
                    {
                        var ф = Данные.НовыйДочерний(Формы, ИмяЗначение(всл), служ, Истина);
                        Формы.п.с.сл.Вставить(всл, ф);
                        мсл = мсл + Символы.ПС + всл;
                    }
                    else
                        мф.Добавить(нф);
                }
            }
            if (!(мсл == "")) // запросить начальные формы
            {
                var Запрос = Структура.Новый("Библиотека, Данные, Параметры, Свойства, cmd", this, Данные, Структура.Новый("Слова, Действие", Сред(мсл, 2), "ФормыСлов"), Неопределено, "Морфология");
                Данные.Процесс.НоваяЗадача(Запрос, "Служебный");
            }
            else
                if (мф.Количество() != 0)
                {
                    foreach (Узел _фУзел1 in (Массив)мф)
                    {
                        var фУзел1 = _фУзел1.Дочерний;
                        while (!(фУзел1 == Неопределено))
                        { // варианты форм
                            var нвар = Новый.Структура("токнач", (фУзел1.Атрибут == Неопределено) ? фУзел1.Имя : фУзел1.Атрибут.Имя);
                            мнф.Добавить(нвар);
                            фУзел1 = фУзел1.Соседний;
                        }
                    }
                }

            return мнф;
        }

        public string Предложение_Свойства(pagedata Данные, Узел оУзел)
        {
            object Свойства = null;
            var шСвойства = "";

            if (!(оУзел.Свойство("Свойства", out Свойства)))
            { // новый объект
                Свойства = Данные.НовыйДочерний(оУзел, ИмяЗначение("Свойства.", ""), Данные.Служебный(оУзел));
                шСвойства = @"
        				|Токены
        				|Разбор: Нет";
                Данные.СоздатьСвойства(Свойства as Узел, шСвойства);
            }

            шСвойства = @"
            |*Открыть: Нет
            |*вТокен
            |*вПравило
            |*вСвязь
            |*События
            |*Вид";

            Данные.СоздатьСвойства(Свойства as Узел, шСвойства, "Только");
            оУзел.Вставить("Свойства", Свойства);

            return null;

        }


        public void Предложение_Модель(pagedata Данные, Узел Свойства, Соответствие Изменения)
        {
            var оУзел = Свойства.Родитель;

            var вТокен = Свойства.д.с.вТокен.Значение as Узел;
            var вУзел = Свойства.д.с.вСвязь as Узел;
            var вСвязь = "" + Свойства.д.с.вСвязь.Значение;

            // обработать события
            if (Изменения.Получить(Свойства.д.с.События) as bool? == Истина)
            {
                var дУзел = Свойства.д.с.События.Дочерний as Узел;
                if (!(дУзел is null))
                {
                    var мСобытие = Стр.Разделить(дУзел.Значение as string, Символы.Таб);
                    var тСобытие = мСобытие[0];
                    if (тСобытие == "ПриНажатии")
                    {
                        var сУзел = Данные.ПолучитьУзел(мСобытие[1]);

                        var ЗначениеКнопка = УзелСвойство(дУзел, "Параметры") as string;
                        if (!(ЗначениеКнопка is null))
                        {

                            if (ЗначениеКнопка == "sent")
                            {
                                var см = Свойства.д.с.Открыть.Значение as string;
                                см = (см == "Да") ? "Нет" : "Да";
                                Свойства.д.с.Открыть.Значение = см;
                                if (см == "Нет")
                                {
                                    Свойства.д.с.Разбор.Значение = "Нет";
                                    if (!(Свойства.д.с.Токены.Дочерний == Неопределено))
                                    {
                                        Данные.УдалитьУзел(Свойства.д.с.Токены.Дочерний, Истина, Истина);
                                    }
                                    Свойства.д.с.вСвязь.Значение = "";
                                    Свойства.д.с.вТокен.Значение = null;
                                    Свойства.Удалить("Грамматики");
                                }

                            }
                            else if (ЗначениеКнопка == "optoken")
                            {

                                var Параметры = Структура.Новый();
                                Параметры.Вставить("nodeid", сУзел.Код);
                                Параметры.Вставить("data", Данные.ИмяДанных);
                                Параметры.Вставить("type", "win");
                                Параметры.Вставить("mode", "struct");
                                Параметры.Вставить("cmd", "newtab");
                                Данные.Процесс.НоваяЗадача(Параметры, "Служебный");

                            }
                            else if (ЗначениеКнопка == "token")
                            {

                                if (!(вТокен == сУзел))
                                {
                                    if (!(вСвязь == ""))
                                    { // И НЕ вТокен.Значение = "" И НЕ сУзел.Значение = "" Тогда
                                      // добавить связь

                                        var нп = Данные.НовыйДочерний(вТокен, ИмяЗначение(вСвязь, сУзел.Имя), Ложь, Истина);
                                        нп.Вставить("п", Структура.Новый()); // параметры
                                        нп.п.Вставить("ток1", вТокен);
                                        нп.п.Вставить("ток2", сУзел);
                                        нп.п.Вставить("б", "");
                                        Свойства.д.с.вСвязь.Значение = "";
                                        вСвязь = Свойства.д.с.вСвязь.Значение;
                                        сУзел.п.Вставить("т2", сУзел.п.с.т1); // привязка
                                        сУзел.п.Вставить("св", нп);
                                        сУзел.п.Вставить("свимя", нп.Имя);
                                        сУзел.п.Вставить("ток1имя", вТокен.Имя);

                                    }
                                    else
                                    {
                                        Свойства.д.с.вТокен.Значение = сУзел;
                                        вТокен = Свойства.д.с.вТокен.Значение;
                                    }

                                }
                                else
                                {
                                    Свойства.д.с.вСвязь.Значение = "";
                                    вСвязь = Свойства.д.с.вСвязь.Значение;
                                    Свойства.д.с.вТокен.Значение = null;
                                    вТокен = Свойства.д.с.вТокен.Значение;
                                }

                            }
                            else if (ЗначениеКнопка == "link")
                            {

                                if (!(Свойства.д.с.вПравило.Значение == сУзел))
                                {
                                    Свойства.д.с.вПравило.Значение = сУзел;
                                }
                                else
                                {
                                    Свойства.д.с.вПравило.Значение = Неопределено;
                                }

                            }
                            else if (Лев(ЗначениеКнопка, 5) == "link_")
                            {

                                var св = Сред(ЗначениеКнопка, 6);
                                if (!(вСвязь == св))
                                {
                                    Свойства.д.с.вСвязь.Значение = св;
                                    вСвязь = Свойства.д.с.вСвязь.Значение;
                                }
                                else
                                {
                                    Свойства.д.с.вСвязь.Значение = "";
                                    вСвязь = Свойства.д.с.вСвязь.Значение;
                                }

                            }
                            else if (ЗначениеКнопка == "conf" || ЗначениеКнопка == "excl" || ЗначениеКнопка == "del" || ЗначениеКнопка == "delgr")
                            {
                                var б = "";

                                if (ЗначениеКнопка == "conf")
                                {
                                    б = "+";
                                }
                                else if (ЗначениеКнопка == "excl")
                                {
                                    б = "-";
                                }
                                else if (ЗначениеКнопка == "del")
                                {
                                    б = "";
                                }
                                else if (ЗначениеКнопка == "delgr")
                                {
                                    б = "г";
                                }

                                // нф связи
                                var мнф = свФормы(Данные, ВРег(сУзел.Имя));

                                var св = Новый.Структура("ток1имя, ток2имя, ток1, ток2, свимя, б, мнф", сУзел.п.с.ток1.Имя, сУзел.п.с.ток2.Имя, (Массив)сУзел.п.с.ток1.п.с.токф, (Массив)сУзел.п.с.ток2.п.с.токф, ВРег(сУзел.Имя), б, мнф);

                                var Запрос = Структура.Новый("Библиотека, Данные, Параметры, Свойства, cmd", this, Данные, Структура.Новый("Слова, Действие", св, "Связи"), Свойства, "Морфология");
                                Данные.Процесс.НоваяЗадача(Запрос, "Служебный");

                                сУзел.п.с.б = б;

                                if (б == "г")
                                { // удалить связь
                                    Данные.УдалитьУзел(сУзел);
                                }

                            }

                        }

                    }
                    else
                    { // изменение полей
                        Свойства.д.с.вСвязь.Значение = дУзел.с.Параметры;
                        вСвязь = Свойства.д.с.вСвязь.Значение;

                        if (вСвязь != "+") свФормы(Данные, ВРег(вСвязь));
                    }

                }
                Данные.УдалитьУзел(дУзел);
                Изменения.Вставить(Свойства.д.с.События, Истина);
                оУзел.Вставить("Обновить", Истина);
            }

            if (!(УзелСвойство(оУзел, "Обновить") as bool? == Ложь))
            {

                // найти формы
                if (Свойства.д.с.Разбор.Значение == "Нет" && Свойства.д.с.Открыть.Значение == "Да")
                {
                    if (Свойства.д.Свойство("Текст"))
                    {
                        var служ = Данные.Служебный(Формы);
                        var пр = Данные.ЗначениеСвойства(Свойства.д.с.Текст);
                        var сСимв = @".,!?:;()«»""'–…"; // - дефис потом
                        for (var н = 1; н <= Стр.Длина(сСимв); н++)
                        {
                            var сс = Сред(сСимв, н, 1);
                            пр = Стр.Заменить(пр, сс, " " + сс + " ");
                        }
                        var м = Стр.Разделить(пр, " ");
                        var мсл = "";
                        foreach (var сл in м)
                        {
                            if (!(сл == ""))
                            {
                                var токФорма = ""; // начальная форма
                                // добавить токен
                                var т = Данные.НовыйДочерний(Свойства.д.с.Токены, ИмяЗначение(сл, токФорма), Ложь, Истина);
                                if (Стр.Найти(сСимв, сл) == 0)
                                {
                                    var всл = ВРег(сл);
                                    if (Формы.п.с.сл.Получить(всл) == Неопределено)
                                    {
                                        var ф = Данные.НовыйДочерний(Формы, ИмяЗначение(всл), служ, Истина);
                                        Формы.п.с.сл.Вставить(всл, ф);
                                        мсл = мсл + Символы.ПС + всл;
                                    }
                                }
                                var д = Стр.Найти(сл, "-");
                                if (!(д == 0))
                                { // есть дефис
                                    мсл = мсл + Символы.ПС + ВРег(Лев(сл, д - 1));
                                    мсл = мсл + Символы.ПС + ВРег(Сред(сл, д + 1));
                                }
                            }
                        }
                        if (!(мсл == ""))
                        {
                            var Запрос = Структура.Новый("Библиотека, Данные, Параметры, Свойства, cmd", this, Данные, Структура.Новый("Слова, Действие", Сред(мсл, 2), "ФормыСлов"), Свойства, "Морфология");
                            Данные.Процесс.НоваяЗадача(Запрос, "Служебный");
                            Свойства.д.с.Разбор.Значение = "Формы";
                        }
                        else
                        {
                            Свойства.д.с.Разбор.Значение = "Токены";
                        }
                    }
                    оУзел.Вставить("Обновить", Ложь);
                }

                // найти правила
                if (Свойства.д.с.Разбор.Значение == "Токены")
                {

                    var Слова = Новый.Массив();

                    // проверим токены с дефисом
                    var т1 = 1;
                    Узел ток1 = Свойства.д.с.Токены.Дочерний;
                    while (!(ток1 == Неопределено))
                    {
                        ток1.Вставить("п", Структура.Новый());
                        ток1.п.Вставить("т1", т1);

                        var ток1Формы = Формы.п.с.сл.Получить(ВРег(ток1.Имя)) as Узел;

                        if (!(ток1Формы == null))
                        {
                            var д = Стр.Найти(ток1.Имя, "-");
                            if (!(д == 0))
                            { // есть дефис
                                if (ток1Формы.Дочерний == Неопределено)
                                { // нет формы с дефисом
                                    Данные.НовыйСоседний(ток1, ИмяЗначение(Сред(ток1.Имя, д + 1)));
                                    ток1["Имя"] = Лев(ток1.Имя, д - 1);
                                    Данные.НовыйСоседний(ток1, ИмяЗначение("-"));
                                    //ток1 = ток1.Соседний.Соседний;
                                    continue;
                                }
                            }

                            // формы токенов для поиска грамматик
                            var мУзел1 = Новый.Массив();
                            var фУзел1 = ток1Формы.Дочерний;
                            while (!(фУзел1 == Неопределено))
                            { // варианты форм
                                var нвар = Новый.Структура("токгр, токнач", фУзел1.Значение, (фУзел1.Атрибут == Неопределено) ? фУзел1.Имя : фУзел1.Атрибут.Имя);
                                мУзел1.Добавить(нвар);
                                фУзел1 = фУзел1.Соседний;
                            }
                            Слова.Добавить(Новый.Структура("т, сл, ф", т1, ВРег(ток1.Имя), мУзел1));

                            ток1.п.Вставить("токф", мУзел1); // начальные формы
                        }

                        ток1 = ток1.Соседний;
                        т1 = т1 + 1;
                    }

                    var Запрос = Структура.Новый("Библиотека, Данные, Параметры, Свойства, cmd", this, Данные, Структура.Новый("Слова, Действие", Слова, "Грамматики"), Свойства, "Морфология");
                    Данные.Процесс.НоваяЗадача(Запрос, "Служебный");
                    оУзел.Вставить("Обновить", Ложь);

                }

                //Привязать токены
                if (Свойства.д.с.Разбор.Значение == "Привязать")
                {
                    Узел ток1 = Свойства.д.с.Токены.Дочерний;
                    Соответствие гр = Свойства.с.Грамматики;
                    while (!(ток1 == Неопределено))
                    {
                        Узел ток2 = Свойства.д.с.Токены.Дочерний;
                        while (!(ток2 == Неопределено))
                        {
                            if (!(ток1 == ток2))
                            {
                                var мсв = гр.Получить("" + (int)ток1.п.с.т1 + "_" + (int)ток2.п.с.т1) as Массив; // связи
                                if (!(мсв is null))
                                {
                                    foreach (Структура св in мсв)
                                    {
                                        if (ток2.п.Свойство("т2"))
                                        { // уже привязан
                                            Узел св2 = ток2.п.с.св;
                                            var р1 = Число(ток2.п.с.т1) - Число(ток2.п.с.т2);
                                            р1 = (р1 < 0) ? -(р1) : р1;
                                            var р2 = Число(ток1.п.с.т1) - Число(ток2.п.с.т1);
                                            р2 = (р2 < 0) ? -(р2) : р2;
                                            if (р1 <= р2) {
                                                if ((int)св2.п.с.о >= (int)св.с.о)
                                                    continue;
                                            }
                                            // удалить сущ. связь
                                            if (св.с.б == "+")
                                                Данные.УдалитьУзел((Узел)ток2.п.с.св);
                                        }

                                        var корр = Истина;
                                        if (корр)
                                        {
                                            var нп = Данные.НовыйДочерний(ток1, ИмяЗначение((string)св.с.свимя, ток2.Имя), Ложь, Истина);
                                            нп.Вставить("п", Структура.Новый()); // параметры
                                            нп.п.Вставить("ток1", ток1);
                                            нп.п.Вставить("ток2", ток2);
                                            нп.п.Вставить("б", св.с.б);
                                            нп.п.Вставить("о", св.с.о);

                                            if (св.с.б == "+")
                                            { // корректная связь
                                                ток2.п.Вставить("т2", ток1.п.с.т1);
                                                ток2.п.Вставить("св", нп);
                                                ток2.п.Вставить("свимя", нп.Имя);
                                                ток2.п.Вставить("ток1имя", ток1.Имя);
                                            }

                                            свФормы(Данные, ВРег(нп.Имя));
                                        }
                                    }
                                }
                            }
                            ток2 = ток2.Соседний;
                        }
                        ток1 = ток1.Соседний;
                    }
                    Свойства.д.с.Разбор.Значение = "Выполнен";
                    оУзел.Вставить("Обновить", Ложь);
                }

                // сформировать представление
                var Вид = "";
                if (Свойства.д.Свойство("Текст"))
                { // Предложение
                    var пр = Данные.ЗначениеСвойства(Свойства.д.с.Текст);
                    var ш = "<button id='_" + оУзел.Код + "' type='button' class='text-left btn1 btn-light' onclick='addcmd(this,event); return false' role='sent'>.текст</button>";
                    var см = (Свойства.д.с.Открыть.Значение == "Нет") ? "&#9655;" : "&#9661;";
                    Вид = Стр.Заменить(ш, ".текст", см);
                    if (Свойства.д.с.Открыть.Значение == "Нет")
                    {
                        if (Свойства.д.Свойство("фВид"))
                        { // показать поле для ввода предложения
                            Вид = Данные.ЗначениеСвойства(Свойства.д.с.фВид);
                        }
                        else
                        {
                            Вид = "<div class='btn-group' role='group'>" + Вид + Стр.Заменить(ш, ".текст", пр) + "</div>";
                        }
                    }
                    else
                    {
                        var тУзел = Свойства.д.с.Токены.Дочерний as Узел;
                        while (!(тУзел == Неопределено))
                        {
                            Вид = Вид + "<button id='_" + тУзел.Код + "' type='button' class='text-left btn1 btn-" + ((вТокен == тУзел) ? "info" : "light") + "' onclick='addcmd(this,event); return false' role='token'>" + тУзел.Имя + "</button>";
                            тУзел = тУзел.Соседний;
                        }
                    }
                }

                if (!(Свойства.д.с.Разбор.Значение == "Нет") && Свойства.д.с.Открыть.Значение == "Да")
                { // Токены
                    var тУзел = Свойства.д.с.Токены.Дочерний;
                    Вид = Вид + "<p>" + ТокенВид(Данные, Свойства, тУзел) + "</p>";
                }

                if (!(вТокен is null))
                { // выбрать связь
                  // показать виды связей
                    var нСв = "";
                    var Связи = Массив.Новый();
                    if (!(вСвязь == ""))
                    {
                        Связи.Добавить(вСвязь);
                    }
                    else
                    {
                        if (!(вТокен is null))
                        {
                            // м = Свойства.Связи.Получить(вТокен.Значение);
                            // Если НЕ м = Неопределено Тогда
                            // 	Для каждого св Из м Цикл
                            // 		Связи.Добавить(св);
                            // 	КонецЦикла;
                            // КонецЕсли;
                        }
                        Связи.Добавить("+");
                    }
                    if (вСвязь == "+")
                    {
                        нСв = нСв + "<input id='" + вТокен.Код + "' type='text' class='form-control-sm' onchange='addcmd(this,event); return false' role='link'></input>";
                        нСв = нСв + "<script>$('#" + вТокен.Код + "')[0].focus();</script>";
                    }
                    else
                    {
                        foreach (string св in Связи)
                        {
                            if (вСвязь == "" || св == вСвязь)
                            {
                                нСв = нСв + "<button id='_" + вТокен.Код + "' type='button' class='text-left btn1 btn-" + ((вСвязь == "") ? "secondary" : "warning") + "' onclick='addcmd(this,event); return false' role='link_" + св + "'>" + св + "</button>";
                            }
                        }
                    }
                    Вид = Стр.Заменить(Вид, "<!--t_" + вТокен.Код + "-->", "<ul>" + нСв + "</ul>");
                }

                Свойства.д.с.Вид.с.Значение = "<p>" + Вид + "</p>";

            }

        }

        object ТокенВид(pagedata Данные, Узел Свойства, Узел дУзел, Массив мУзел = null, Узел рУзел = null)
        {
            var Связи = "";
            var вТокен = Свойства.д.с.вТокен.Значение as Узел;
            while (!(дУзел == Неопределено))
            {
                var Связь = "";
                if (дУзел.Родитель == Свойства.д.с.Токены) // токен
                {
                    мУзел = Массив.Новый();
                    мУзел.Добавить(дУзел);
                    if (вТокен is null)
                    {
                        if (дУзел.Свойство("п"))
                            if (дУзел.п.Свойство("т2"))
                            { // привязан к другому
                                дУзел = дУзел.Соседний;
                            continue;
                            }
                    }
                    if (вТокен is null || вТокен == дУзел)
                    {
                        Связь = "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + ((вТокен == дУзел) ? "info" : "light") + "' onclick='addcmd(this,event); return false' role='" + ((вТокен == дУзел) ? "optoken" : "token") + "'>" + дУзел.Имя + "</button>";
                        if (!(дУзел.Дочерний == Неопределено))
                        {
                            Связь = Связь + ТокенВид(Данные, Свойства, дУзел.Дочерний, мУзел);
                        }
                    }
                }
                else // связь
                {
                    if (!(рУзел == Неопределено))
                    {
                        if (!(рУзел.Имя == дУзел.Имя))
                        { // у предлога должна совпадать связь
                            дУзел = дУзел.Соседний;
                            continue;
                        }
                    }
                    if (вТокен == дУзел.Родитель || !(дУзел.п.с.б == "-"))
                    { // связь не некорректная
                        var тУзел = дУзел.п.с.ток2 as Узел;
                        if (!(вТокен == дУзел.Родитель) && тУзел.п.Свойство("свкод"))
                        {
                            if (!(тУзел.п.с.свкод == дУзел.Код))
                            { // не тот токен привязан
                                тУзел = null;
                            }
                        }
                        if (тУзел.п.Свойство("св")) // уже привязан к другому
                            if ((Узел)тУзел.п.с.св != дУзел)
                            {
                                дУзел = дУзел.Соседний;
                                continue;
                            }

                        if (!(тУзел == Неопределено))
                        {
                            if (мУзел.Найти(тУзел) == -1)
                            {
                                мУзел.Добавить(тУзел);
                                if (вТокен == дУзел.Родитель || дУзел.п.с.б == "+")
                                {
                                    Связь = "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + ((дУзел.п.с.б == "-") ? "danger" : ((дУзел.п.с.б == "+" && !(вТокен is null)) ? "success" : "secondary")) + "' onclick='addcmd(this,event); return false' role='optoken'>" + дУзел.Имя + "</button>";
                                    Связь = Связь + "<button id='_" + тУзел.Код + "' type='button' class='text-left btn1 btn-light' onclick='addcmd(this,event); return false' role='token'>" + дУзел.Значение + "</button>";
                                    if (!(вТокен is null))
                                    {
                                        if (дУзел.п.с.б == "")
                                        {
                                            Связь = Связь + "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + "secondary" + "' onclick='addcmd(this,event); return false' role='conf'>&#9745;</button>";
                                            Связь = Связь + "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + "secondary" + "' onclick='addcmd(this,event); return false' role='excl'>&#9746;</button>";
                                            Связь = Связь + "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + "secondary" + "' onclick='addcmd(this,event); return false' role='delgr'>&#10008;</button>";
                                        }
                                        else
                                        {
                                            Связь = Связь + "<button id='_" + дУзел.Код + "' type='button' class='text-left btn1 btn-" + "secondary" + "' onclick='addcmd(this,event); return false' role='del'>&#9744;</button>";
                                        }
                                    }
                                }
                                if (!(тУзел.Дочерний == Неопределено) && дУзел.п.с.б == "+")
                                {
                                    //if (Лев(дУзел.п.ток2гр, 4) == "PREP")
                                    //{
                                    //    var зСвязь = ТокенВид(Данные, Свойства, тУзел.Дочерний, мУзел, дУзел);
                                    //    if (!(вТокен == дУзел.Родитель) && зСвязь == "")
                                    //    {
                                    //        Связь = "";
                                    //    }
                                    //    Связь = Связь + зСвязь;
                                    //}
                                    //else
                                    {
                                        Связь = Связь + ТокенВид(Данные, Свойства, тУзел.Дочерний, мУзел);
                                    }
                                }
                                мУзел.Удалить(мУзел.Найти(тУзел));
                            }
                        }
                    }
                }
                if (!(Связь == ""))
                {
                    Связь = Связь + "<!--t_" + дУзел.Код + "-->";
                    Связь = "<ul>" + Связь + "</ul>";
                    Связи = Связи + Связь;
                }
                дУзел = дУзел.Соседний;
            }
            return Связи;
        } // ТокенВид()


    }

}
